[
  {
    "path": "posts/2022-03-27-whats-the-difference-between-science-and-storytelling/",
    "title": "What's the Difference Between Science and Storytelling in Data Science?",
    "description": "It's easy to come up with stories and plausible explanations. What's hard is to be *right*.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": "https://olivierbinette.github.io"
      }
    ],
    "date": "2022-03-27",
    "categories": [],
    "contents": "\nNote: this is a cross-post from\nLinkedIn.\nAs scientists (and statisticians ü§ì), we use data to explain things\nlike natural phenomena and business outcomes.\nWe come up with nice little stories that are easy to communicate and\neasy for the audience to digest.\nBut coming up with stories is only half of the work. It‚Äôs easy to\nfind patterns in data and come up with plausible explanations.\nWhat‚Äôs hard is to be right. For that, you need a\nscientific approach.\nCall hypotheses your stories and explanations. Then,\nmake sure you have a plan to test them.\nIf your explanation is right, what else should be going on? Is that\nother thing indeed happening? Make your explanations falsifiable and\nthen rigorously try to prove yourself wrong.\nDon‚Äôt stop at the explanations or at what seems to make sense. Go\nthrough the whole scientific process, down to the documentation of what\nyou‚Äôve done to validate your hypotheses.\nThis is what is going to make you into a reliable scientist rather\nthan just a storyteller. üë©‚Äçüî¨\n\n\n\n",
    "preview": "posts/2022-03-27-whats-the-difference-between-science-and-storytelling/banner-cropped.jpg",
    "last_modified": "2022-03-27T13:48:24-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-03-10-web-app-for-welcome-to-the-moon/",
    "title": "Web App for \"Welcome to the Moon\"",
    "description": "Play \"Welcome to the Moon\" on the couch or remotely.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": "https://olivierbinette.github.io"
      }
    ],
    "date": "2022-03-10",
    "categories": [],
    "contents": "\nIf you know me, you know that I love playing board games. I like the puzzle, the challenge, and ‚Äì most of all ‚Äì the stories that unfold as a game goes on.\nI recently discovered Welcome to the Moon. It‚Äôs a ‚Äúflip and write‚Äù board game which is quite easy to learn and play. It‚Äôs also a lot of fun with only two players, which is a good fit for me and my partner.\n\n\n\nI‚Äôm a bit lazy about the card flipping aspect of this game though, which is the only thing keep us from playing the game on the couch (or remotely via screen sharing). So I wrote a simple web app to do the flipping for us: olivierbinette.github.io/welcome-to-the-moon-card-flipper/\n\nI hope you enjoy if you‚Äôre a fan of the game!\nRemote Play\nThe rulebook for the game and its 8 adventure sheets are available on the publisher‚Äôs website. You can play the game remotely using the adventure sheets and my website.\n\n\n\n",
    "preview": "posts/2022-03-10-web-app-for-welcome-to-the-moon/screenshot.png",
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-01-29-a-brief-introduction-to-hyperparameter-optimization/",
    "title": "A Brief Introduction to Hyperparameter Optimization in Machine Learning",
    "description": "I review a few black-box hyperparameter optimization techniques at a high conceptual level: grid search, randomized search and sequential model-based optimization.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": "https://olivierbinette.github.io"
      }
    ],
    "date": "2022-01-29",
    "categories": [
      "Machine Learning",
      "Hyperparameter Optimzation"
    ],
    "contents": "\n\nContents\n1 Introduction\n1.1 Background and Terminology\nModels, Parameters and Performance Evaluation\nHyperparameters\nExample\n\n2 Black-Box Optimization Methods\n2.1 Grid Search\n2.2 Random Search\n2.3 Sequential Model-Based Optimization\n\n3 Discussion\n\n\n\n\n1 Introduction\nMachine learning is easy, right? You pick a model, fit it to your data, and out come predictions.\n\nThat‚Äôs how machine learning is taught at colleges. That‚Äôs how it‚Äôs sold to businesses as well. Sometimes we talk about the fancy math and algorithms under the hood to make it look serious, but we rarely talk about how difficult it is to transform whatever data can gather into useful, actionable predictions that have business value.\nThere are many challenges. First, there‚Äôs the transformation of a business problem into something that‚Äôs remotely approachable by machine learning and statistics. Second, there‚Äôs the development of a data collection plan or, more often than not, the identification of observational data which is already available. With the collection of this data comes the third step, modeling, which bridges between numbers and useful answers. Modeling may have to account for all kinds of issue with your data, such as class imbalance, missingness, and non-representativeness. You also want to obtain good answers, so throughout this step you loop between model specification, evaluation, and refinement. It is a lengthy process of research and investigation into the performance of your model, insights into the why of what you observe, and various fixes and improvements to your model. Finally, in a fourth stage, you must account for how your model will be used and the management of its lifecycle.\n\nMoral of the story: there is a lot work involved. We need all hands on deck. And even more than that, we need robust automatization tools to support this machine learning workflow.\nThis blog post is about a single set of tools ‚Äì hyperparameter optimization techniques ‚Äì used to help with the model specification, evaluation, and refinement loop. I will focus on the standard machine learning framework of supervised learning. In this context, machine learning algorithms can be seen as black boxes which take in some data, a bunch of tuning hyperparameters specified by the user of the algorithm, and which output predictions. The quality of the predictions can be evaluated through data splitting or cross-validation. That is, we‚Äôre always able to compare predictions to ground truth for the data we have at hand.\nMy goal is to describe key approaches to hyperparameter optimization (see Table 1) in order to provide conceptual understanding that can be helpful practice. I describe black-box methods which treat the machine learning algorithm as, well, a black blox. This includes grid search, randomized search, and sequential model-based optimization such as Bayesian optimization. There are additional methods to be considered, such as Hyperband and Bayesian model selection, which integrate with the learning algorithms themselves. These will be for another blog post.\nTable 1: Different types of hyperparameter optimization methods\nBlack-box methods\nIntegrated methods\nGrid Search\nHyperband\nRandomized Search\nBayesian Model Selection\nSequential Model-Based Optimization\n\nBefore getting into the detail of these methods though, let‚Äôs go over some basic concepts and terminology which I‚Äôll be using.\n1.1 Background and Terminology\nFirst, let‚Äôs talk about models, parameters and performance evaluation. This is going to be the occasion for me to introduce some terminology and notations.\nModels, Parameters and Performance Evaluation\nA model is a mathematical representation of something going on in the real world. For instance, suppose you want to predict whether or not a given stock \\(X\\) is going to go up tomorrow. A model for this could be: predict it‚Äôs going to go up with probability \\(\\alpha\\) if it went up today, otherwise predict it‚Äôs not going to go up with probability \\(\\beta\\). There‚Äôs only one variable in this model (whether or not the stock went up today), and there are two parameters, the probabilities \\(\\alpha\\) and \\(\\beta\\). Here the parameters could be learned if we had historical data.\nYou could consider more sophisticated models such as classical time series models or reccurent neural networks. In all cases, you have variables (the input to your model), parameters (what you learn from data), and you end up with predictions.\nYou can compare the performance of any model by comparing the predictions to what actually happened. For instance, you could look at how often your predictions were right. That‚Äôs a performance evaluation metric. Your goal is usually to build a model which will keep on performing well.\nFormally, let \\(R\\) be the (average) future performance of your model. You don‚Äôt know this quantity, but you can estimate it as \\(\\hat R\\) using techniques such as cross-validation and its variants. There might be a bias and a variance to \\(\\hat R\\), but the best we can do in practice is to try to find the model with the best estimated performance (modulo certain adjustments).\nThis brings us to the question: how should you choose a model? The standard in machine learning is to choose a model which maximizes \\(\\hat R\\). It‚Äôs not the only solution, and it‚Äôs not always the best solution (it can be better to do model averaging if \\(\\hat R\\) has some variance), but it‚Äôs what we‚Äôll focus on through this blog post.\nFurthermore, we‚Äôll approach this problem through the lens of hyperparameter selection.\nHyperparameters\nHyperparameters are things that have you have to specify before you can run a model, such as:\nwhat data features to use,\nwhat type of model to use (linear model? random forest? neural network?)\nother decisions that go into the specification of a model:\nthe number of layers in your neural network,\nthe learning rate for the gradient descent algorithm,\nthe maximum depth for decision trees, etc.\n\nThere is only a practical distinction between parameters and hyperparameters. Hyperparameters are things that are usually set separately from the other model parameters, or that do not nicely fit within a model‚Äôs learning algorithm. Depending on the framework you‚Äôre using, parameters can become hyperparameters and vice versa. For example, by using ensemble methods, you could easily transform the ‚Äúmodel type choice‚Äù hyperparameter to a simple parameter of your ensemble that is learned from data.\nThe key thing is that, in practice, there will typically be some distinction between parameters of your model and a set of hyperparameters that you have to specify.\nThrough experience, you can learn what hyperparameters work well for the kinds of problems that you work on. Other times, you might carefully tune parameters and investigate the impact of your choices on model performance.\nThe manual process of hyperparameter tuning can lead to important insights into the performance and behavior of your model. However, it can also be a menial task that would be better automated through hyperparameter optimization algorithms aiming to maximize \\(\\hat R\\), such as those that I review below.\nExample\nLet‚Äôs look at an example to make things concrete. This is adapted from scikit-optimize‚Äôs tutorial for tuning scikit-learn estimators.\nWe‚Äôll consider the California housing dataset from the scikit-learn library. Each row in this dataset represents a census block and contains aggregated information regarding houses in that block. Our goal will be to predict median house price at the block level given these other covariates.\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.datasets import fetch_california_housing\n\ndataset = fetch_california_housing(as_frame=True)\n\nX = dataset.data # Covariates\nn_features = X.shape[1] # Number of features\ny = dataset.target # Median house prices\n\nX\n       MedInc  HouseAge  AveRooms  ...  AveOccup  Latitude  Longitude\n0      8.3252      41.0  6.984127  ...  2.555556     37.88    -122.23\n1      8.3014      21.0  6.238137  ...  2.109842     37.86    -122.22\n2      7.2574      52.0  8.288136  ...  2.802260     37.85    -122.24\n3      5.6431      52.0  5.817352  ...  2.547945     37.85    -122.25\n4      3.8462      52.0  6.281853  ...  2.181467     37.85    -122.25\n...       ...       ...       ...  ...       ...       ...        ...\n20635  1.5603      25.0  5.045455  ...  2.560606     39.48    -121.09\n20636  2.5568      18.0  6.114035  ...  3.122807     39.49    -121.21\n20637  1.7000      17.0  5.205543  ...  2.325635     39.43    -121.22\n20638  1.8672      18.0  5.329513  ...  2.123209     39.43    -121.32\n20639  2.3886      16.0  5.254717  ...  2.616981     39.37    -121.24\n\n[20640 rows x 8 columns]\n\nFor the regression, we‚Äôll use scikit-learn‚Äôs gradient boosted trees estimator. This model has a number of internal parameters which don‚Äôt need to know much about, as well as hyperparameters which can be used to tune the model. This includes the max_depth hyperparameter for the maximum depth of decision trees, learning_rate for the learning rate of gradient boosting, max_features for the maximum number of features to use in each decision trees, and a few more. Ranges of reasonable values for these parameters are specified in the space variable below.\n\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom skopt.space import Real, Integer\n\nmodel = GradientBoostingRegressor(n_estimators=25, random_state=0)\n\nspace  = [Integer(1, 8, name='max_depth'),\n          Real(0.01, 1, \"log-uniform\", name='learning_rate'),\n          Integer(1, n_features, name='max_features'),\n          Integer(1, 50, name='min_samples_leaf')\n]\n\nNow, the last thing we need is an estimator \\(\\hat R\\) for the model‚Äôs performance. This is our Rhat() function (i.e.¬†\\(\\hat R\\)) which we‚Äôll try to maximize. Here we use a cross-validated mean absolute error score.\n\nfrom sklearn.model_selection import cross_val_score\n\ndef Rhat(**params):\n  model.set_params(**params)\n  \n  return -np.mean(cross_val_score(model, X, y, cv=3, n_jobs=-1,\n                                  scoring=\"neg_mean_absolute_error\"))\n\nWith this, we can fit the model to the data (using default hyperparameter values to begin with), and evaluate the model‚Äôs performance.\n\nmodel.fit(X, y)\nGradientBoostingRegressor(n_estimators=25, random_state=0)\nRhat()\n0.5503720160635011\n\nHere the unit for median house price was in hundreds of thousands of dollars and we can interpret the model performance at this scale. The value \\(\\hat R \\approx 0.55\\) means that, on average, the absolute error of the model is $55,000. We‚Äôll see if we can do better using hyperparameter optimization.\n2 Black-Box Optimization Methods\nBlack-box hyperparameter optimization algorithms consider the underlying machine algorithm as unknown. We only assume that, given a set of hyperparameters \\(\\lambda\\), we can compute the estimated model performance \\(\\hat R(\\lambda)\\). There is usually variance in \\(\\hat R(\\lambda)\\), but this is not something that I will talk about in this post. We will therefore consider \\(\\hat R\\) as a deterministic function to be optimized.\nNote: in practice, you need to account for the variance in \\(\\hat R\\), as otherwise you could get bad surprises. It‚Äôs just not something I‚Äôm covering in this post, since I want to focus on a conceptual understanding of the optimization algorithms.\nWe can use almost any technique to try to optimize \\(\\hat R\\), but there are a number of challenges with hyperparameter optimization:\n\\(\\hat R\\) is usually rather costly to evaluate.\nWe usually do not have gradient information regarding \\(\\hat R\\) (otherwise, hyperparameters for which we have gradient information could easily be incorporated as parameters of the underlying ML algorithms).\nThe hyperparameter space is usually complex. It can contain discrete variables and can even be tree-structured, where some hyperparameters are only defined conditionally on other hyperparameters.\nThe hyperparameter space is usually somewhat high-dimensional, with more than just 2-3 dimensions.\nThese particularities of the hyperparameter optimization problem has led the machine learning community to favor some of the optimization techniques which I discuss below.\n2.1 Grid Search\nThe first technique to consider is grid search, which is a brute force approach to hyperparameter optimization. It is the simplest of all ‚Äì you simply specify values to consider for each hyperparameter, and then evaluate your model performance for each combination of hyperparameter. At the end, you keep the hyperparameter configuration which performed best.\nThere are a few advantages to this approach:\nIt gives you precise control over what hyperparameter configurations are evaluated.\nIt is simple to implement and easily parallelizable.\nHowever, there are also a number of serious drawbacks:\nThe runtime scales exponentially in the number of hyperparameter dimensions.\nThe runtime is tied to the hyperparameter search space which you specify. To reduce runtime, you need to manually redefine this space.\nLet‚Äôs see an example of how this works in practice. First, we define a grid of hyperparameter values to evaluate. Given the scoring function \\(\\hat R\\), we can then use scikit-learn‚Äôs GridSearchCV() function to evaluate the model performance at each hyperparameter combination. This is done below:\n\nfrom sklearn.model_selection import GridSearchCV\n\n# Budget of 54 evaluations\ngrid = {\n  'max_depth': [1, 3, 5],\n  'learning_rate': [0.01, 0.1, 1],\n  'max_features': [2, 4, 8],\n  'min_samples_leaf': [1, 10]\n}\n\ndef scoring(estimator, X_test, y_test):\n  y_pred = estimator.predict(X_test)\n  return -np.mean(np.abs(y_test - y_pred))\n\nresults = GridSearchCV(model, grid, cv=3, n_jobs=-1, scoring=scoring).fit(X, y)\n\nWe can then recover the best score and best hyperparameters. The best model is slightly better than the default model we looked at earlier, with a $4,000 decrease in average absolute error.\n\n-results.best_score_ # Lowest cross-validated mean absolute error\n0.5084134111524956\n{key:results.best_params_[key] for key in grid.keys()} # Best parameters\n{'max_depth': 5, 'learning_rate': 0.1, 'max_features': 8, 'min_samples_leaf': 1}\n\nIt is also informative to plot an histogram for the distribution of model scores. We can see that most model configurations performed much worst than the default.\n\nimport matplotlib.pyplot as plt\n\nplt.clf()\np = plt.hist(-results.cv_results_[\"mean_test_score\"], bins=20)\np = plt.title(\"Score distribution for evaluated hyperparameters\", loc=\"left\")\np = plt.xlabel(\"Cross-validated average absolute error\")\nplt.show()\n\n\n2.2 Random Search\nThe second method we‚Äôll look at is random search. Here, the idea is to sample a number \\(k\\) of hyperparameter configurations at random from a given space, and to evaluate those random configurations.\nThis might seem like a silly idea. Why pick hyperparameter values at random?\nThe answer is that doing so removes all computational penalties from the consideration of useless hyperparameter dimensions. That is, imagine that a number \\(s\\) of your hyperparameters have actually no impact on model performance. With grid search, the consideration of these hyperparameters would incur you a computational penalty which is exponential in \\(s\\). With random search, however, there is no penalty at all for adding these \\(s\\) additional hyperparameter dimensions. The results from random search with or without these additional dimensions are exactly the same in both cases.\nThis is the huge advantage of random search over grid search: you do not get penalized for useless dimensions. Furthermore, in practice, being able to tune the search effort through the number of samples \\(k\\) can be quite convenient.\nLet‚Äôs see how this can be implemented in practice. We‚Äôll define a hyperparameter space which is similar to the grid space we specified earlier, but which is filled in with additional possible values. We can then run scikit-learn‚Äôs RandomizedSearchCV() function to do the randomized search:\n\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import loguniform\n\n# Around roughly the same values as for the grid search\nparam_distribution = {\n  'max_depth': range(1, 8),\n  'learning_rate': loguniform(0.01, 1),\n  'max_features': range(1, 9),\n  'min_samples_leaf': range(1, 50)\n}\n\n# Budget of 54 evaluations\nresults = RandomizedSearchCV(model, param_distribution, n_iter=54, cv=3, n_jobs=-1, scoring=scoring, random_state=0).fit(X, y)\n\nThe results are below. By considering a richer hyperparameter space, and without being penalized by this in the same way we would with a grid search, randomized search allows us to find a better model with the same amount of effort.\n\n-results.best_score_ # Lowest cross-validated mean absolute error\n0.4797334598181764\n{key:results.best_params_[key] for key in grid.keys()} # Best parameters\n{'max_depth': 6, 'learning_rate': 0.14539375242431551, 'max_features': 7, 'min_samples_leaf': 26}\n\nAgain, we can look at the distribution of model performance for sampled hyperparameter configurations. It‚Äôs quite similar to grid search, with only a few better-performing models being identified.\n\nimport matplotlib.pyplot as plt\n\nplt.clf()\np = plt.hist(-results.cv_results_[\"mean_test_score\"], bins=20)\np = plt.title(\"Score distribution for evaluated hyperparameters\", loc=\"left\")\np = plt.xlabel(\"Cross-validated average absolute error\")\nplt.show()\n\n\n2.3 Sequential Model-Based Optimization\nAll of the techniques considered so far made no assumption at all about the function \\(\\hat R\\) to optimize.\nThis is a problem, because we do have prior information about \\(\\hat R\\). We can expect \\(\\hat R\\) to have some level of regularity, meaning that similar hyperparameter configurations should have similar performance. This knowledge allows us to make inference about \\(\\hat R(\\lambda)\\) given the evaluation of \\(\\hat R\\) at other points \\(\\tilde \\lambda \\not = \\lambda\\).\nMore formally, suppose we have evaluated \\(\\hat R\\) at a sequence of hyperparameter configurations \\(\\lambda_1, \\lambda_2, \\dots, \\lambda_n\\), thus observing \\(\\hat R(\\lambda_1), \\hat R(\\lambda_2), \\dots, \\hat R(\\lambda_n)\\). This allows us to make inference about \\(\\hat R\\). In particular, we can try guessing what next \\(\\lambda_{n+1}\\) will maximize \\(\\hat R\\) or improve our knowledge of \\(\\hat R\\). Once we‚Äôve observed \\(\\hat R(\\lambda_{n+1})\\), we repeat the process, trying to guess which \\(\\lambda_{n+2}\\) to pick to improve the procedure. That is the entire idea behind sequential model-based optimization.\nTo make this work in practice, we need the following ingredients:\nAn inferential model for \\(\\hat R\\). That could be a Bayesian nonparametric model, like a Gaussian Process, or something else, like a Tree-structure Parzen Estimator.\nA method to guess the next best hyperparameter value to pick. Typically, \\(\\lambda_{n+1}\\) is chosen to maximize the expected improvement criterion. This chooses \\(\\lambda\\) to maximize the expected value of \\(\\max\\{\\hat R(\\lambda) - R^*, 0\\}\\), where \\(R^*\\) is the current observed performance maximum. In other words, we want to maximize the potential for improving the current optimum, without penalizing for the possibility of observing a lower performance. This allows us to optimize \\(\\hat R\\) while still exploring the hyperparameter space. I refer the reader to here for a review of a few other selection criterions.\nWhen a Bayesian inferential framework is chosen, then sequential model-based optimization is called Bayesian optimization or Bayesian search. It is beyond of the scope of this blog post to go into the details of gaussian processes, but below I show howthe scikit-optimize library can be used to perform Bayesian optimization based on Gaussian Processes and the expected improvement criterion:\n\nfrom skopt import gp_minimize\nfrom skopt.utils import use_named_args\n\n@use_named_args(space)\ndef objective(**params):\n  model.set_params(**params)\n  \n  return -np.mean(cross_val_score(model, X, y, cv=3, n_jobs=-1,\n                                  scoring=\"neg_mean_absolute_error\"))\n\nres_gp = gp_minimize(objective, space, n_calls=54, random_state=1)\n\n## 0.46\n\nWith Bayesian optimization, we see that much more time is spent sampling performant models.\n\nplt.clf()\np = plt.hist(res_gp.func_vals, bins=20)\np = plt.title(\"Score distribution for evaluated hyperparameters\", loc=\"left\")\np = plt.xlabel(\"Cross-validated average absolute error\")\nplt.show()\n\n\nFurthermore, we can see that the algorithm quickly converges towards performant models.\n\nfrom skopt.plots import plot_convergence\n\nplot_convergence(res_gp)\n\n\n3 Discussion\nHopefully, this blog post provided a basic overview of hyperparameter optimization and of what can be gained from these techniques. We reviewed grid search, the simplest brute force approach. We reviewed random search, which improves upon grid search when some hyperparameter dimensions are not influencial. Finally, we reviewed sequential model-based optimization, which much more effectively samples models with good performance.\n\n\n\n",
    "preview": "posts/2022-01-29-a-brief-introduction-to-hyperparameter-optimization/a-brief-introduction-to-hyperparameter-optimization_files/figure-html5/unnamed-chunk-8-1.png",
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-01-01-record-linkage-at-the-gpsg-community-pantry/",
    "title": "Record Linkage at the Duke GPSG Community Pantry",
    "description": "The Duke Graduate and Professional Student Government (GPSG) Community Pantry is a student-operated food pantry serving the student community at Duke University. In this post, I describe the record linkage system used at the Pantry to identify individual customers and obtain their order history. This is done using a Python module for deterministic record linkage and model evaluation techniques which I describe in detail.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": "https://olivierbinette.github.io"
      }
    ],
    "date": "2021-12-23",
    "categories": [
      "Python",
      "Record Linkage"
    ],
    "contents": "\n\nContents\nIntroduction\nFood Insecurity on Campus\n\nThe Record Linkage Approach\nDeterministic Record Linkage Rule\nImplementation\nLimitations\n\nModel Evaluation\nPairwise Precision and Recall\nResults\n\nFinal thoughts\nAbout the Author\n\nFigure from https://gpsg.duke.edu/resources-for-students/community-pantry/This is cross-posted from https://recordlinkageig.github.io/.\nIntroduction\nDuke‚Äôs Graduate and Professional Student Government (GPSG) has been operating a community food pantry for about five years. The pantry provides nonperishable food and basic need items to graduate and professional students on campus. There is a weekly bag program, where students order customized bags of food to be picked up on Saturdays, as well as an in-person shopping program open on Thursdays and Saturdays.\n\nFigure 1: Weekly number of customers at the Pantry. The black line is a moving average of weekly visits.\n\nThe weekly bag program, which began in May 2018 and is still the most popular pantry offering, provides quite a bit of data regarding pantry customers and their habits. Some customers have ordered more than 80 times in the past 2 years, while others only ordered once or twice. For every order, we have the customer‚Äôs first name and last initial, an email address (which became mandatory around mid 2018), a phone number in a few cases, an address in some cases (for delivery), we have demographic information some cases, and we have the food order information. Available quasi-identifying information is shown in Table 1 below.\nTable 1: Quasi-identifying information provided on Qualtrics bag order forms. Note that phone number and address were only required while delivery was offered. Furthermore, most customers stop answering demographic questions after a few orders.\nQuestion no.\nQuestion\nAnswer form\nMandatory?\n-\nIP address\n-\nYes\n2\nFirst name and last initial\nFree form\nYes\n3\nDuke email\nFree form\nYes\n4\nPhone number\nFree form\nNo\n6\nAddress\nFree form\nNo\n8\nFood allergies\nFree form\nNo\n9\nNumber of members in household\n1-2 or 3+\nYes\n10\nWant baby bag?\nYes or no\nYes\n30\nDegree\nMultiple choices or Other\nNo\n31\nSchool\nMultiple choices or Other\nNo\n32\nYear in graduate school\nMultiple choices\nNo\n33\nNumber of adults in household\nMultiple choices\nNo\n34\nNumber of children in household\nMultiple choices\nNo\nGaining the most insight from this data requires linking order records from the same customer. Identifying individual customers and associating them with an order history allows us to investigate shopping recurrence patterns and identify potential issues with the pantry‚Äôs offering. For instance, we can know who stopped ordering from the pantry after the home delivery program ended. These are people who, most likely, do not have a car to get to the pantry but might benefit from new programs, such as a ride-share program or a gift card program.\nThis blog post describes the way in which records are linked at the Community Pantry. As we will see, the record linkage problem is not particularly difficult. It is not trivial either, however, and it does require care to ensure that it runs reliably and efficiently, and that it is intelligible and properly validated. This post goes in detail into these two aspects of the problem.\nRegarding efficiency and reliability of the software system, I describe the development of a Python module, called GroupByRule, for record linkage at the pantry. This Python module is maintainable, documented and tested, ensuring reliability of the system and the potential for its continued use throughout the years, even as technical volunteers change at the pantry. Regarding validation of the record linkage system, I describe simple steps that can be taken to evaluate model performance.\nBefore jumping into the technical part, let‚Äôs take a step back to discuss the issue of food insecurity on campus.\nFood Insecurity on Campus\nIt is often surprising to people that some Duke students might struggle having access to food. After all, Duke is one of the richest campuses in the US with its 12 billion endowment, high tuition and substantial research grants. Prior to the covid-19 pandemic, this wealth could be seen on campus and benefit many. Every weekday, there were several conferences and events with free food. Me and many other graduate students would participate in these events, earning 3-4 free lunches every week. Free food on campus is now a thing of the past, for the most part.\nHowever, free lunch or not, it‚Äôs important to realize the many financial challenges which students can face. International students on F-1 and J-1 visas have limited employment opportunities in the US. Many graduate students are married, have children or have other dependents which may not be eligible to work in the US either. Even if they are lucky enough to be paid a 9 or 12-month stipend, this stipend doesn‚Äôt go very far. For other students, going to Duke means living on a mixture of loans, financial aid, financial support from parents, and side jobs. Any imbalance in this rigid system can leave students having to compromise between their education and their health.\nA 2019 study from the World Food Policy Center reported that about 19% of graduate and professional students at Duke experienced food insecurity in the past year. This means they were unable to afford a balanced and sufficient diet, they were afraid of not having enough money for food, or they skipped meals and went hungry due to lack of money. The GPSG Community Pantry has been leading efforts to expand food insecurity monitoring on campus ‚Äì we are hoping to have more data in 2022 and in following years.\nThe Record Linkage Approach\nThe bag order form contains email addresses which are highly reliable for linkage. If two records have the same email, we know for certain that they are from the same customer. However, customers do not always enter the same email address when submitting orders. Despite the request to use a Duke email address, some customers use personal emails. Furthermore, Duke email addresses have two forms. For instance, my duke email is both ob37@duke.edu and olivier.binette@duke.edu. Emails are therefore not sufficient for linkage. Phone numbers can be used as well, but these are only available for the period when home delivery was available.\nFirst name and last initial can be used to supplement emails and phone numbers. Again, agreement on first name and last initial provides strong evidence for match. On the other hand, people do not always enter their names in the same way.\nCombining the use of emails, phone numbers, and names, we may therefore link records which agree on any one of these attributes. This is a simple deterministic record linkage approach which should be reliable enough for the data analysis use of the pantry.\nDeterministic Record Linkage Rule\nTo be more precise, record linkage proceeds as follows:\nRecords are processed to clean and standardize the email, phone and name attributes. That is, leading and trailing whitespace are removed, capitalization is standardized, phone numbers are validated and standardized, and punctuation is removed from names.\nRecords which agree on any of their email, phone or name attributes are linked together.\nConnected components of the resulting graph are computed in order to obtain record clusters.\nThis record linkage procedure is extremely simple. It relies the fact that all three attributes are reliable indicators of a match and that, for two matching records, it is likely that at least one of these three attributes will be in agreement.\nAlso, the simplicity of the approach allows the use of available additional information (such as IP address and additional questions) for model validation. If the use of this additional information does not highlight any flaws with the simple deterministic approach, then this means that the deterministic approach is already good enough. We will come back to this when discussing model validation techniques.\nImplementation\nOur deterministic record linkage system is implemented in Python with some generality. The goal is for the system to be able to adapt to changes in data or processes.\nThe fundamental component of the system is a LinkageRule class. LinkageRule objects can be fitted to data, providing either a clustering or a linkage graph. For instance, a LinkageRule might be a rule to link all records which agree on the email attribute. Another LinkageRule might summarize a set of other rules, such as taking the union or intersection of their links.\nThe interface is as follows:\n\nfrom abc import ABC, abstractmethod\n\n\nclass LinkageRule(ABC):\n    \"\"\"\n    Interface for a linkage rule which can be fitted to data.\n\n    This abstract class specifies three methods. The `fit()` method fits the \n    linkage rule to a pandas DataFrame. The `graph` property can be used after \n    `fit()` to obtain a graph representing the linkage fitted to data.  The \n    `groups` property can be used after `fit()` to obtain a membership vector \n    representing the clustering fitted to data.\n    \"\"\"\n    @abstractmethod\n    def fit(self, df):\n        pass\n\n    @property\n    @abstractmethod\n    def graph(self):\n        pass\n\n    @property\n    @abstractmethod\n    def groups(self):\n        pass\n\nNote that group membership vectors, our representation for cluster groups, are meant to be a numpy integer array with entries indicating what group (cluster) a given record belongs to. Such a ‚Äúgroups‚Äù vector should not contain NA values; rather it should contain distinct integers for records that are not in the same cluster.\nWe will now define two other classes, Match and Any, which allow us to implement deterministic record linkage. The Match class implements an exact matching rule, while Any is the logical disjunction of a given set of rules. Our deterministic record linkage rule for the pantry will therefore be defined as follows:\n\nrule = Any(Match(\"name\"), Match(\"email\"), Match(\"phone\"))\n\nFollowing the LinkageRule interface, this rule will then be fitted to the data and used as follows:\n\nrule.fit(data)\ndata.groupby(rule.groups).last() # Get last visit data for all customers.\n\nThe benefit of this general interface is that it is extendable. By default, the Any class will return connected components when requesting group clusters. However, other clustering approaches could be used. Exact matching rules could also be relaxed to fuzzy matching rules based on string distance metrics or probabilistic record linkage. All of this can be implemented as additional LinkageRule subclasses in a way which is compatible with the above.\nLet‚Äôs now work on the Match class. For efficiency, we‚Äôll want Match to operate at the groups level. That is, if Match is called on a set of rules, then we‚Äôll first compute groups for these rules, before computing the intersection of these groups. This core functionality is implemented in the function _groups_from_rules() below. The function _groups() is a simple wrapper to interpret strings as a matching rule on the corresponding column.\n\nimport pandas as pd\nimport numpy as np\nimport itertools\nfrom igraph import Graph\n\ndef _groups(rule, df):\n    \"\"\"\n    Fit linkage rule to dataframe and return membership vector.\n\n    Parameters\n    ----------\n    rule: string or LinkageRule\n        Linkage rule to be fitted to the data. If `rule` is a string, then this \n        is interpreted as an exact matching rule for the corresponding column.\n    df: DataFrame\n        pandas Dataframe to which the rule is fitted.\n\n    Returns\n    -------\n    Membership vector (i.e. integer vector) u such that u[i] indicates the \n    cluster to which dataframe row i belongs. \n\n    Notes\n    -----\n    NA values are considered to be non-matching.\n\n    Examples\n    --------\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({\"fname\":[\"Olivier\", \"Jean-Francois\", \"Alex\"], \n      \"lname\":[\"Binette\", \"Binette\", pd.NA]})\n\n    Groups specified by distinct first names:\n    >>> _groups(\"fname\", df)\n    array([2, 1, 0], dtype=int8)\n\n    Groups specified by same last names:\n    >>> _groups(\"lname\", df)\n    array([0, 0, 3], dtype=int8)\n\n    Groups specified by a given linkage rule:\n    >>> rule = Match(\"fname\")\n    >>> _groups(rule, df)\n    array([2, 1, 0])\n    \"\"\"\n    if (isinstance(rule, str)):\n        arr = np.array(pd.Categorical(df[rule]).codes, dtype=np.int32) # Specifying dtype avoids overflow issues\n        I = (arr == -1)  # NA value indicators\n        arr[I] = np.arange(len(arr), len(arr)+sum(I))\n        return arr\n    elif isinstance(rule, LinkageRule):\n        return rule.fit(df).groups\n    else:\n        raise NotImplementedError()\n\n\ndef _groups_from_rules(rules, df):\n    \"\"\"\n    Fit linkage rules to data and return groups corresponding to their logical \n    conjunction.\n\n    This function computes the logical conjunction of a set of rules, operating \n    at the groups level. That is, rules are fitted to the data, membership \n    vector are obtained, and then the groups specified by these membership \n    vectors are intersected.\n\n    Parameters\n    ----------\n    rules: list[LinkageRule]\n        List of strings or Linkage rule objects to be fitted to the data. \n        Strings are interpreted as exact matching rules on the corresponding \n        columns.\n\n    df: DataFrame\n        pandas DataFrame to which the rules are fitted.\n\n    Returns\n    -------\n    Membership vector representing the cluster to which each dataframe row \n    belongs.\n\n    Notes\n    -----\n    NA values are considered to be non-matching.\n\n    Examples\n    --------\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({\"fname\":[\"Olivier\", \"Jean-Francois\", \"Alex\"], \n      \"lname\":[\"Binette\", \"Binette\", pd.NA]})\n    >>> _groups_from_rules([\"fname\", \"lname\"], df)\n    array([2, 1, 0])\n    \"\"\"\n\n    arr = np.array([_groups(rule, df) for rule in rules]).T\n    groups = np.unique(arr, axis=0, return_inverse=True)[1]\n    return groups\n\nWe can now implement Match as follows. Note that the Graph representation of the clustering is only computed if and when needed.\n\nclass Match(LinkageRule):\n    \"\"\"\n    Class representing an exact matching rule over a given set of columns.\n\n    Attributes\n    ----------\n    graph: igraph.Graph\n        Graph representing linkage fitted to the data. Defaults to None and is \n        instantiated after the `fit()` function is called.\n\n    groups: integer array\n        Membership vector for the linkage clusters fitted to the data. Defaults \n        to None and is instantiated after the `fit()` function is called.\n\n    Methods\n    -------\n    fit(df)\n        Fits linkage rule to the given dataframe.\n\n    Examples\n    --------\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({\"fname\":[\"Olivier\", \"Jean-Francois\", \"Alex\"], \n    \"lname\":[\"Binette\", \"Binette\", pd.NA]})\n\n    Link records which agree on both the \"fname\" and \"lname\" fields.\n    >>> rule = Match(\"fname\", \"lname\")\n\n    Fit linkage rule to the data.\n    >>> _ = rule.fit(df)\n\n    Construct deduplicated dataframe, retaining only the first record in each cluster.\n    >>> _ = df.groupby(rule.groups).first()\n    \"\"\"\n\n    def __init__(self, *args):\n        \"\"\"\n        Parameters\n        ----------\n        args: list containing strings and/or LinkageRule objects.\n            The `Match` object represents the logical conjunction of the set of \n            rules given in the `args` parameter. \n        \"\"\"\n        self.rules = args\n        self._update_graph = False\n        self.n = None\n\n    def fit(self, df):\n        self._groups = _groups_from_rules(self.rules, df)\n        self._update_graph = True\n        self.n = df.shape[0]\n\n        return self\n\n    @property\n    def groups(self):\n        return self._groups\n\nOne more method is needed to complete the implementation of a LinkageRule, namely the graph property. This property returns a Graph object corresponding to the matching rule. The graph is built as follows. First, we construct an inverted index for the clustering. That is, we construct a dictionary associating to each cluster the nodes which it contains. Then, an edge list is obtained by linking all pairs of nodes which belong to the same cluster. Note that the pure Python implementation below if not efficient for large clusters. This is not a problem for now since we will generally avoid computing this graph.\n\n# Part of the definition of the `Match` class:\n    @property\n    def graph(self) -> Graph:\n        if self._update_graph:\n            # Inverted index\n            clust = pd.DataFrame({\"groups\": self.groups}\n                                 ).groupby(\"groups\").indices\n            self._graph = Graph(n=self.n)\n            self._graph.add_edges(itertools.chain.from_iterable(\n                itertools.combinations(c, 2) for c in clust.values()))\n            self._update_graph = False\n        return self._graph\n\nFinally, let‚Äôs implement the Any class. It‚Äôs purpose is to take the union (i.e.¬†logical disjunction) of a set of rules. Just like for Match, we can choose to operate at the groups or graph level. Here we‚Äôll work at the groups level for efficiency. That is, given a set of rules, Any will first compute their corresponding clusters before merging overlapping clusters.\nThere are quite a few different ways to efficiently merge clusters. Here we‚Äôll merge clusters by computing a ‚Äúpath graph‚Äù representation, taking the union of these graphs, and then computing connected components. For a given clustering, say containing records a, b, and c, the ‚Äúpath graph‚Äù links records as a path a‚Äìb‚Äìc.\nFirst, we define the functions needed to compute path graphs:\n\ndef pairwise(iterable):\n    \"\"\"\n    Iterate over consecutive pairs:\n        s -> (s[0], s[1]), (s[1], s[2]), (s[2], s[3]), ...\n\n    Note\n    ----\n    Current implementation is from itertools' recipes list available at \n    https://docs.python.org/3/library/itertools.html\n    \"\"\"\n    a, b = itertools.tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\n\ndef _path_graph(rule, df):\n    \"\"\"\n    Compute path graph corresponding to the rule's clustering: cluster elements \n    are connected as a path.\n\n    Parameters\n    ----------\n    rule: string or LinkageRule\n        Linkage rule for which to compute the corresponding path graph \n        (strings are interpreted as exact matching rules for the corresponding column).\n    df: DataFrame\n        Data to which the linkage rule is fitted.\n\n    Returns\n    -------\n    Graph object such that nodes in the same cluster (according to the fitted \n    linkage rule) are connected as graph paths.\n    \"\"\"\n    gr = _groups(rule, df)\n    \n    # Inverted index\n    clust = pd.DataFrame({\"groups\": gr}\n                         ).groupby(\"groups\").indices\n    graph = Graph(n=df.shape[0])\n    graph.add_edges(itertools.chain.from_iterable(\n        pairwise(c) for c in clust.values()))\n\n    return graph\n\nWe can now implement the Any class:\n\nclass Any(LinkageRule):\n    \"\"\"\n    Class representing the logical disjunction of linkage rules.\n\n    Attributes\n    ----------\n    graph: igraph.Graph\n        Graph representing linkage fitted to the data. Defaults to None and is \n        instantiated after the `fit()` function is called.\n\n    groups: integer array\n        Membership vector for the linkage clusters fitted to the data. Defaults \n        to None and is instantiated after the `fit()` function is called.\n\n    Methods\n    -------\n    fit(df)\n        Fits linkage rule to the given dataframe.\n    \"\"\"\n\n    def __init__(self, *args):\n        \"\"\"\n        Parameters\n        ----------\n        args: list containing strings and/or LinkageRule objects.\n            The `Any` object represents the logical disjunction of the set of \n            rules given by `args`. \n        \"\"\"\n        self.rules = args\n        self._graph = None\n        self._groups = None\n        self._update_groups = False\n\n    def fit(self, df):\n        self._update_groups = True\n        graphs_vect = [_path_graph(rule, df) for rule in self.rules]\n        self._graph = igraph.union(graphs_vect)\n        return self\n\n    @property\n    def groups(self):\n        if self._update_groups:\n            self._update_groups = False\n            self._groups = np.array(\n                self._graph.clusters().membership)\n        return self._groups\n\n    @property\n    def graph(self) -> Graph:\n        return self._graph\n\nThe complete Python module (still under development) implementing this approach can be found on Github at OlivierBinette/GroupByRule.\nLimitations\nThere are quite a few limitations with this simple deterministic approach. We‚Äôll see in the model evaluation section that these do not affect performance to a large degree. However, for a system used with more data or over a longer timeframe, these should be carefully considered.\nFirst, the deterministic linkage does not allow the consideration of contradictory evidence. For instance, if long-form Duke email addresses are provided on two records and do not agree (e.g.¬†‚Äúolivier.binette@duke.edu‚Äù and ‚Äúolivier.bonhomme@duke.edu‚Äù are provided), then we know for sure that the records do not correspond to the same individual, even if the same name was provided (here Olivier B.). The consideration of such evidence could rely on probabilistic record linkage, where each record pair is associated a match probability.\nSecond, the use of connected components to resolve transitivity can be problematic, as a single spurious link could connect two large clusters by mistake. More sophisticated graph clustering techniques, in combination with probabilistic record linkage, would be required to mitigate the issue.\nModel Evaluation\nI cannot share any of the data which we have at the Pantry. However, I can describe general steps to be taken to evaluate model performance in practice.\nPairwise Precision and Recall\nHere we will evaluate linkage performance using pairwise precision \\(P\\) and recall \\(R\\). The precision \\(P\\) is defined as the proportion of predicted links which are true matches, whereas \\(R\\) is the proportion of true matches which are correctly predicted. That is, if \\(TP\\) is the number of true positive links, \\(P\\) the number of predicted links, and \\(T\\) the number of true matches, then we have \\[\nP = TP/P, \\quad R = TP/T.\n\\]\nEstimating Precision\nIt is helpful to express precision and recall in cluster form, where cluster elements are all interlinked. Let \\(C\\) be the set of true clusters and let \\(\\hat C\\) be the set of predicted clusters. For a given cluster \\(\\hat c \\in \\hat C\\), let \\(C \\cap \\hat c\\) be the restriction of the clustering \\(C\\) to \\(\\hat c\\). Then we have \\[\n  P = \\frac{\\sum_{\\hat c \\in \\hat C} \\sum_{e \\in C \\cap \\hat c} {\\lvert e\\rvert \\choose 2} }{ \\sum_{\\hat c \\in \\hat C} {\\lvert \\hat c \\rvert \\choose 2}}.\n\\]\nThe denominator can be computed exactly, while the numerator can be estimated by randomly sampling clusters \\(\\hat c \\in \\hat C\\), breaking them up into true clusters \\(e \\in C \\cap \\hat c\\), and then computing the sum of the combinations \\({\\lvert e\\rvert \\choose 2}\\). Importance sampling could be used to reduce the variance of the estimator, but it does not seem necessary for the scale of the data which we have at the pantry, where each predicted cluster can be examined quite quickly.\nIn practice, the precision estimation process can be carried out as follows:\nSample predicted clusters at random (in the case of the pantry, we can take all predicted clusters).\nMake a spreadsheet with all the records corresponding to the sampled clusters.\nSort the spreadsheet by predicted cluster ID.\nAdd a new empty column to the spreadsheet, called ‚ÄútrueSubClusters.‚Äù\nSeparately look at each predicted cluster. If the cluster should be broken up in multiple parts, use the ‚ÄútrueSubClusters‚Äù column to provide identifiers for true cluster membership. Note that these identifiers do not need to match across predicted clusters.\nThe spreadsheet can then be read-in and processed in a straightforward way to obtain an estimated precision value.\nEstimating Recall\nEstimating recall is a bit trickier than estimating precision, but we can make one assumption to simplify the process. Assume that precision is exactly 1, or very close to 1, so that all predicted clusters can roughly be taken at face value. Estimating recall then boils to the problem of identifying which predicted clusters should be merged together.\nIndeed, using the same notations as above, we can write \\[\nR = \\frac{\\sum_{ c \\in  C} \\sum_{e \\in \\hat C \\cap  c} {\\lvert e\\rvert \\choose 2} }{ \\sum_{ c \\in  C} {\\lvert  c \\rvert \\choose 2}}.\n\\] If precision is 1, then the denominator can be computed from the sizes of predicted clusters which are identified to be merged. On the other hand, the nominator simplifies to \\(\\sum_{e \\in \\hat C}{\\lvert e \\rvert \\choose 2}\\) which can be computed exactly from the sizes of predicted clusters. In the case of the Pantry, wrongly separated clusters are likely to be due to small differences in names and emails. Our procedure to identify clusters which should have been merged together is as follows:\nMake a spreadsheet containing canonical customer records (one representative record for each predicted individual customer).\nCreate a new empty column named ‚ÄútrueClustersA.‚Äù\nSort the spreadsheet by name.\nGo through the spreadsheet from top to bottom, looking at whether or not consecutive predicted clusters should be merged together. If so, write a corresponding cluster membership ID in the ‚ÄútrueClustersA‚Äù column.\nCreate a new empty column named ‚ÄútrueClustersB.‚Äù\nSort the spreadsheet by email\nGo through the spreadsheet from top to bottom, looking at whether or not consecutive predicted clusters should be merged together. If so, write a corresponding cluster membership ID in the ‚ÄútrueClustersB‚Äù column.\nThis process might not catch all wrongly separated clusters, but it is likely to find many of the errors due to different ways of writing names and different email addresses. The resulting spreadsheet can then easily be processed to obtain an estimated recall. If we were working with a larger dataset, we‚Äôd have to use further blocking to restrict our consideration to a more manageable subset of the data.\nResults\nI used the above procedures to estimate precision and recall of our simple deterministic approach to deduplicate the Pantry‚Äôs data. There was a total of 3281 bag order records for 689 estimated customers. The results are below.\nEstimated Precision: 92%\nPrecision is somewhat low due to about 3 relatively large clusters (around 30-50 records each) which should have been broken up in a few parts. 2% precision was lost due to a couple that shared a phone number, where each had about 20 order records. The vast majority of spurious links were tied to bag orders for which only the first name was provided (e.g.¬†‚ÄúSam‚Äù). The use of negative evidence to distinguish between individuals would help resolve these cases.\nEstimated Recall: 99.6%\nThis is certainly an overestimate, but it does show that missing links are not obviously showing up. Given the structure of the Pantry data, it is likely that recall is indeed quite high.\nFinal thoughts\nThere are many ways in which the record linkage approach could be improved. As previously discussed, probabilistic record linkage would allow the consideration of negative evidence and the use of additional quasi-identifying information (such as IP addresses and other responses on the bag order forms). I‚Äôm looking forward to building on the GroupByRule Python module to provide a user-friendly and unified interface to more flexible methodology.\nHowever, it is important to ensure that any record linkage approach is intelligible and rooted in a good understanding of the underlying data. In this context, the use of a well-thought deterministic approach can provide good performance, at least as a first step or baseline for comparison. Furthermore, it is important to spend sufficient time investigating the results of the linkage to evaluate performance. I have highlighted simple steps which can be taken to estimate precision and make a good effort at identifying missing links. This is highly informative for model validation, improvement, and for the interpretation of any following results.\nAbout the Author\nOlivier is a PhD Candidate in the Statistical Science Department at Duke University. He works part-time as research coordinator at the GPSG Community Pantry. There are lots of other ways to support and contribute to distilltools. Please see the contributing guide for more details.\n\n\n\nCampbell, Kevin M., Dennis Deck, and Antoinette Krupski. 2008. ‚ÄúRecord Linkage Software in the Public Domain: A Comparison of Link Plus, the Link King, and a ‚ÄôBasic‚Äô Deterministic Algorithm.‚Äù Health Informatics Journal 14 (1): 5‚Äì15.\n\n\nGomatam, Shanti, Randy Carter, Mario Ariet, and Glenn Mitchell. 2002. ‚ÄúAn Empirical Comparison of Record Linkage Procedures.‚Äù Statistics in Medicine 21 (10): 1485‚Äì96. https://doi.org/10.1002/sim.1147.\n\n\nMonge, Alvaro E., and Charles P. Elkan. 1997. ‚ÄúAn Efficient Domain-Independent Algorithm for Detecting Approximately Duplicate Database Records.‚Äù Proceedings of the SIGMOD 1997 Workshop on Research Issues on Sata Mining and Knowledge Discovery, 23‚Äì29. https://doi.org/10.1.1.28.8405.\n\n\nPotosky, Arnold L., Gerald F. Riley, James D. Lubitz, Renee M. Mentnech, and Larry G. Kessler. 1993. ‚ÄúPotential for Cancer Related Health Services Research Using a Linked Medicare-Tumor Registry Database.‚Äù Medical Care 31 (8): 732‚Äì48. https://doi.org/10.1097/00005650-199308000-00006.\n\n\nTromp, Miranda, Anita C. Ravelli, Gouke J. Bonsel, Arie Hasman, and Johannes B. Reitsma. 2011. ‚ÄúResults from Simulated Data Sets: Probabilistic Record Linkage Outperforms Deterministic Record Linkage.‚Äù Journal of Clinical Epidemiology 64 (5): 565‚Äì72. https://doi.org/10.1016/j.jclinepi.2010.05.008.\n\n\n\n\n",
    "preview": "http://dukegpsc.org/wp-content/uploads/2019/07/pantry.jpg",
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-theory-of-gibbs-posterior-concentration/",
    "title": "Theory of Gibbs posterior concentration",
    "description": "Notes on some research in progress.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2019-10-11",
    "categories": [],
    "contents": "\nConsider the statistical learning framework where we have data \\(X\\sim Q\\) for some unknown distribution \\(Q\\), a model \\(\\Theta\\) and a loss function \\(\\ell_\\theta(X)\\) measuring a cost associated with fitting the data \\(X\\) using a particular \\(\\theta\\in\\Theta\\). Our goal is to use the data to learn about parameters which minimize the risk \\(R(\\theta) = \\mathbb{E}[\\ell_\\theta(X)]\\). Here are two standard examples.\nDensity estimation. Suppose we observe independent random variables \\(X_1, X_2, \\dots, X_n\\). Here the model \\(\\Theta\\) parametrizes a set \\(\\mathcal{M} = \\{p_\\theta : \\theta \\in \\Theta \\}\\) of probability density functions (with respect to some dominating measure on the sample space), and our loss for \\(X = (X_1, \\dots, X_n)\\) is defined as \\[\n\\ell_\\theta(X) = - \\sum_{i=1}^n \\log p_\\theta(X_i).\n\\] If, for instance, the variables \\(X_i\\) are independent with common distribution with density function \\(p_{\\theta_0}\\) for some \\(\\theta_0 \\in \\mathbb{\\Theta}\\), then it follows from the positivity of the Kullback-Leibler divergence that \\(\\theta_0 \\in \\arg\\min _ \\theta \\mathbb{E}[\\ell _ \\theta(X)]\\). That is, under identifiability conditions, our learning target is the true data-generating distribution.\nIf the model is misspecified, roughly meaning that there is no \\(\\theta_0\\in \\Theta\\) such that \\(p_{\\theta_0}\\) is a density of \\(X_i\\), then our framework sets up the learning problem to be about the parameter \\(\\theta_0\\) which is such that \\(p_{\\theta_0}\\) mininizes the Kullback-Leibler divergence between \\(p_{\\theta_0}\\) and the true marginal distribution of the \\(X_i\\)‚Äôs.\nRegression. Here our observations take the form \\((Y_i, X_i)\\), the model \\(\\Theta\\) parameterizes regression functions \\(f_\\theta\\) and we can consider a sum of squared errors loss \\[\n\\ell_\\theta(X) = \\sum_{i=1}^n(Y_i - f_\\theta(X_i))^2.\n\\]\nGibbs posterior distributions\nGibbs Learning approaches this problem from a pseudo Bayesian point of view. While typically a Bayesian approach would require the specification of a full data-generating model, here we replace the likelihood function by the pseudo-likelihood function \\(\\theta \\mapsto e^{-\\ell_\\theta(X)}\\). Given a prior \\(\\pi\\) on \\(\\Theta\\), the Gibbs posterior distribution is then given by \\[\n\\pi(\\theta \\mid X) \\propto e^{-\\ell_\\theta(X)} \\pi(\\theta)\n\\] and satisfies \\[\n\\pi(\\cdot \\mid X) \\in \\text{argmin}_{\\hat \\pi} \\left\\{ \\mathbb{E}_{\\theta \\sim \\hat \\pi}[\\ell_\\theta(X)] + D_{\\text{KL}}(\\hat \\pi \\mid \\pi) \\right\\}\n\\] whenever these expressions are well defined.\nIn the context of integrable pseudo-likelihoods, the above can be re-interpreted as a regular posterior distributions built from density functions \\(f _ \\theta(x) \\propto e^{-\\ell _ \\theta(x)}\\) and with a prior \\(\\tilde \\pi\\) satisfying \\[\n\\frac{d\\tilde \\pi}{d\\pi}(\\theta) \\propto \\int e^{-\\ell_\\theta(x)}\\,dx =: c(\\theta).\n\\] However, the reason we cannot apply standard asymptotic theory to the analysis of Gibbs posterior is that the quantity \\(c(\\theta)\\) will typically be sample-size dependent. That is, if \\(X=X^n=(X_1, X_2, \\dots, X_n)\\) for i.i.d. random variables \\(X_i\\) and if the loss \\(\\ell_\\theta\\) separates as the sum \\[\n\\ell_\\theta(X) = \\sum_{i=1}^nl_{\\theta}(X_i),\n\\] then \\(c(\\theta) = \\left(\\int e^{-l_\\theta(x_1)} \\, dx_1\\right)^n\\). This data-dependent prior, tilting \\(\\pi\\) by the function \\(c(\\theta)^n\\), is what allows Gibbs learning to target general risk-minimizing parameters rather than likelihood Kullback-Leibler minimizers.\nSome of my ongoing research, presented as a poster at the O‚ÄôBayes conference in Warwick last summer, focused on understand the theoretical behaviour of Gibbs posterior distributions. I studied the posterior convergence and finite sample concentration properties of Gibbs posterior distributions under the large sample regime with additive losses \\(\\ell_\\theta^{(n)}(X_1, \\dots, X_n) = \\sum_{i=1}^n\\ell_\\theta(X_i)\\). I‚Äôve attached the poster (joint work with Yu Luo) below and you can find the additional references here.\nNote that this is very preliminary work. We‚Äôre still in the process of exploring interesting directions (and I have very limited time this semester with the beginning of my PhD at Duke).\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-the-credibility-of-confidence-intervals/",
    "title": "The Credibility of confidence intervals",
    "description": "When p < 0.05 provides evidence in favor of the null...",
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2019-09-11",
    "categories": [],
    "contents": "\nAndrew Gelman and Sander Greenman went ‚Äúhead to head‚Äù in a discussion on the interpretation of confidence intervals in The BMJ. Greenman stated the following, which doesn‚Äôt seem quite right to me.\n\nThe label ‚Äú95% confidence interval‚Äù evokes the idea that we should invest the interval with 95/5 (19:1) betting odds that the observed interval contains the true value (which would make the confidence interval a 95% bayesian posterior interval\\(^{11}\\)). This view may be harmless in a perfect randomized experiment with no background information to inform the bet (the original setting for the ‚Äúconfidence‚Äù concept); more often, however [‚Ä¶]\n\nIt‚Äôs not true that ‚Äúthis view may is harmless in perfect randomized experiments‚Äù, and I‚Äôm not sure where this ‚Äúoriginal setting of the confidence concept‚Äù is coming from. In fact, even in the simplest possible cases, the posterior probability of a \\(95\\%\\) confidence interval can be pretty much anything.\nImagine a ‚Äúperfect randomized experiment‚Äù, where we use a test of the hypothesis \\(H_0: \\mu = 0\\) for which, for some reason, has zero power. If \\(p < 0.05\\), meaning that the associated confidence interval excludes \\(0\\), then we are certain that \\(H_0\\) holds and the posterior probability of the confidence interval is zero.\nLet this sink in. For some (albeit trivial) statistical tests, observing \\(p < 0.05\\) brings evidence in favor of the null.\nThe power of the test carries information, and the posterior probability of a confidence interval (or of an hypothesis), depends on this power among other things, even in perfect randomized experiments.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-bayesian-optimalities/",
    "title": "Bayesian Optimalities",
    "description": "Some notes regarding various 'optimalities' of posterior distributions.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2019-05-24",
    "categories": [],
    "contents": "\n1. Point estimation and minimal expected risk\nThis first section is not directly about properties of the posterior distribution, but it is rather concerned with some summaries of the posterior which have nice statistical properties in different contexts.\nSquared error loss\nSuppose \\(\\pi\\) is a prior on an euclidean parameter space \\(\\Theta \\subset \\mathbb{R}^d\\) with norm \\(\\|\\theta\\|^2 = \\theta^T \\theta\\) defined through the dot product. Given a likelihood \\(p _ \\theta(X)\\) for data \\(X\\), the posterior distribution is defined as\n\\[\n\\pi(A \\mid X) \\propto \\int _ A p _ \\theta(X) \\pi(d\\theta)\n\\]\nand the mean of the posterior distribution is\n\\[\n\\hat \\theta _ {\\pi} = \\int \\theta \\,\\pi(d\\theta \\mid X) = \\mathbb{E} _ {\\theta \\sim \\pi}[\\theta \\mid X].\n\\]\nIf we define the risk of an estimator \\(\\hat \\theta\\) for the estimation of a parameter \\(\\theta _ 0\\) as\n\\[\nR(\\hat \\theta; \\theta _ 0) = \\mathbb{E} _ {X \\sim p _ \\theta}[\\|\\theta _ 0 - \\hat \\theta(X)\\|^2],\n\\]\nand if\n\\[\nB _ \\pi(\\hat \\theta) = \\mathbb{E} _ {\\theta _ 0 \\sim \\pi}[R(\\hat \\theta; \\theta _ 0)]\n\\]\nis the expected risk of \\(\\hat \\theta\\) with respect to the prior \\(\\pi\\) (also called the Bayes risk), then we have that the posterior mean estimate \\(\\hat \\theta _ {\\pi}\\) satisfies\n\\[\nB _ \\pi(\\hat \\theta) \\geq B _ \\pi(\\hat \\theta _ \\pi)\n\\]\nfor any estimator \\(\\hat \\theta\\). That is, the posterior mean estimate minimizes the expected risk.\nThe proof follows from the fact that\n\\[\n\\| \\theta _ 0 - \\hat \\theta(X) \\|^2 \\geq \\|\\theta _ 0 - \\hat \\theta _ \\pi(X) \\|^2 + \\langle \\theta _ 0 - \\hat \\theta _ \\pi(X), \\hat \\theta _ \\pi(X) - \\hat \\theta(X)\\rangle.\n\\]\nWriting the expected risk as an expected posterior loss, i.e.¬†using the fact that\n\\[\n\\mathbb{E} _ {\\theta _ 0 \\sim \\pi}\\left[\\mathbb{E} _ {X \\sim p _ {\\theta _ 0}}[\\,\\cdot\\,]\\right] = \\mathbb{E} _ {X \\sim m}\\left[\\mathbb{E} _ {\\theta _ 0 \\sim \\pi(\\cdot \\mid X)}[\\,\\cdot\\,]\\right]\n\\]\nwhere \\(m\\) has density \\(m(x) = \\int p _ \\theta(x) \\pi(\\theta)\\,d\\theta\\), and since\n\\[\n\\mathbb{E} _ {\\theta _ 0 \\sim \\pi(\\cdot \\mid X)}\\left[\\langle \\theta _ 0 - \\hat \\theta _ \\pi(X), \\hat \\theta _ \\pi(X) - \\hat \\theta(X)\\rangle\\right] = 0,\n\\]\nwe obtain the result.\nA few remarks:\nThe expected risk has stability properties. If \\(\\tilde \\pi\\) and \\(\\pi\\) are two priors that are absolutely continuous with respect to each other, and if \\(\\|\\log \\frac{d\\tilde \\pi}{d\\pi}\\| _ \\infty \\leq C\\), then\n\\[\n   e^{-C}B _ \\pi(\\hat\\theta) \\leq B _ {\\tilde \\pi}(\\hat \\theta) \\leq e^C B _ {\\pi}(\\hat \\theta).\n\\]\nIf the risk \\(R(\\hat \\theta; \\theta _ 0)\\) is uniformly bounded by some constant \\(M\\) over \\(\\theta _ 0\\in \\Theta\\), then\n\\[\n   B _ {\\tilde \\pi}(\\hat \\theta) \\leq \\sqrt{M B _ {\\pi}(\\hat \\theta)} \\left\\|d\\tilde\\pi/d\\pi\\right\\| _ {L^2(\\pi)}.\n\\]\nThis shows how small chances in the prior does not result in a dramatic change in the expected loss of an estimator, as long as the priors have ‚Äúcompatible tails‚Äù (i.e.¬†a manageable likelihood ratio).\nIt is sometimes advocated to choose the prior \\(\\pi\\) so that the risk \\(R(\\hat \\theta _ \\pi; \\theta _ 0)\\) is constant over \\(\\theta _ 0\\): the resulting estimator \\(\\hat \\theta _ \\pi\\) is then agnostic, from a risk point of view, to \\(\\theta _ 0\\). This may result in a sample-size dependent prior (which is arguably not in the Bayesian spirit), but the fun thing is that it makes the expected risk maximal and the Bayes estimator \\(\\hat \\theta _ \\pi\\) minimax: \\(\\hat \\theta _ \\pi \\in \\arg\\min _ {\\hat\\theta} \\sup _ {\\theta _ 0}R(\\hat \\theta;\\theta _ 0)\\). Indeed, in that case we have for any estimator \\(\\hat \\theta\\) that \\(\\sup _ {\\theta _ 0} R(\\hat \\theta; \\theta _ 0) \\geq B _ \\pi(\\hat \\theta) \\geq B _ \\pi(\\theta _ \\pi) = \\sup _ {\\theta _ 0}R(\\hat \\theta _ \\pi;\\theta _ 0)\\), from which it follows that \\(\\hat \\theta _ \\pi\\) is minimax.\nThe idea of minimizing expected risk is not quite Bayesian, since it required us to first average over all data possibilities when computing the risk. One of the main advantage of the Bayesian framework is that it allows us to condition over the observed data, rather than pre-emptively considering all possibilities, and we can try to make use of that. Define the posterior expected loss (or posterior risk) or an estimator \\(\\hat \\theta\\), conditionally on \\(X\\), as\n\\[\n   R _ \\pi(\\hat \\theta\\mid X) = \\mathbb{E} _ {\\theta _ 0 \\sim \\pi(\\cdot \\mid X)}\\left[(\\hat \\theta(X) - \\theta _ 0)^2\\right].\n\\]\n\nIt is clear from the previous computations that the posterior mean estimate minimizes the posterior risk, and hence the two approaches are equivalent. It turns out that, whatever the loss function we consider (under some regularity condition ensuring that stuff is finite and minimizers exist), minimizing the posterior risk is equivalent to minimizing the Bayes risk. In other words, we have that for any loss function (again under some regularity conditions ensuring finiteness and existence of stuff), we have\n\n\\[\n   \\arg\\min _ {\\hat \\theta}\\mathbb{E} _ {X \\sim m}\\left[\\mathbb{E} _ {\\theta _ 0 \\sim \\pi(\\cdot \\mid X)}[\\ell(\\hat \\theta(X), \\theta _ 0)]\\right] = \\arg\\min _ {\\hat\\theta}\\mathbb{E} _ {\\theta _ 0 \\sim \\pi(\\cdot \\mid X)}[\\ell(\\hat \\theta(X), \\theta _ 0)].\n\\]\n\nThis is roughly self-evident if we think about it. An interesting consequence is that any estimator minimizing a Bayes risk is a function of the posterior distribution.\n\n2. Randomized estimation and information risk minimization\nLet \\(\\Theta\\) be a model, let \\(X \\sim Q\\) be some data and let \\(\\ell _ \\theta(X)\\) be a loss associated with using \\(\\theta\\) to fitting the data \\(X\\). For instance, we could have \\(\\Theta = \\{f:\\mathcal{X} \\rightarrow \\mathbb{R}\\}\\) a set of functions, \\(X =\\{(U _ i, Y _ i)\\} _ {i=1}^n \\subset \\mathcal{X}\\times \\mathbb{R}\\) a set of features with associated responses, and \\(\\ell _ \\theta(X) = \\sum _ {i}(Y _ i -\\theta(U _ i))^2\\) the sum of squared loss.\nThere may be a parameter \\(\\theta _ 0\\in\\Theta\\) minimizing the risk \\(R(\\theta) = \\mathbb{E} _ {X\\sim Q}[\\ell _ \\theta(X)]\\), which will then be our learning target. Now we consider randomized estimators taking the form \\(\\theta\\sim \\hat \\pi _ X\\), where \\(\\hat\\pi _ X\\) is a data-dependent distribution, and the performance of this estimation method can then be evaluated by the empirical risk \\(R _ X (\\hat\\pi _ X) = \\mathbb{E} _ {\\theta \\sim \\hat \\pi _ X}[\\ell _ \\theta(X)]\\).\nHere we should be raising an eyebrow. There is typically no point in having the estimator \\(\\theta\\) being random, i.e.¬†we typically will prefer to take \\(\\hat \\pi _ X\\) a point mass rather than anything else. But bear with me for a sec.¬†The cool thing is that if we choose\n\\[\n\\hat \\pi _ X = \\arg\\min _ {\\hat \\pi _ X} \\left\\{R(\\hat \\pi _ X) + D(\\hat \\pi _ X \\| \\pi)\\right\\}, \\tag{$*$}\n\\]\nwhere \\(D(\\hat \\pi _ X\\| \\pi) = \\int \\log \\frac{d\\hat \\pi _ X}{d\\pi} \\,d\\hat \\pi _ X\\) is the Kullback-Leibler divergence, then this distribution will satisfy\n\\[\nd\\hat \\pi _ X(\\theta) \\propto e^{-\\ell _ \\theta(X)}d\\pi(\\theta).\n\\]\nThat is, Bayesian-type posteriors arise by minimizing the empirical risk of a randomized estimation scheme penalized by the Kullback-Leibler divergence form prior to posterior (Zhang, 2006).\nFor the proof, write\n\\[\nR _ X(\\hat \\pi _ X) + D(\\hat \\pi _ X \\| \\pi) = \\int \\left(\\ell _ \\theta(X) + \\log\\frac{d\\hat \\pi _ X(\\theta)}{d\\pi(\\theta)}\\right) d\\hat \\pi _ X (\\theta)=\\int\\left(\\log\\frac{d\\hat\\pi _ X(\\theta)}{e^{-\\ell _ \\theta(X)}d\\pi(\\theta)}\\right)d\\hat \\pi _ X(\\theta)\n\\]\nwhich is also equal to \\(D(d\\hat \\pi _ X \\| e^{-\\ell _ \\theta(X)} d\\pi)\\) and, by properties of the Kullback-Leibler divergence, obviously minimized at \\(d\\hat \\pi _ X \\propto e^{\\ell _ \\theta(X)}d\\pi(\\theta)\\).\nIs this practically useful and insightful? Possibly. But at least this approach is suited to a general theory, as shown in Zhang (2006) and as I reproduce below.\nLet us introduce a R√©nyi-type generalization error defined, for \\(\\alpha \\in (0,1)\\), by\n\\[\nd _ \\alpha(\\theta; Q) = -\\alpha^{-1}\\log\\mathbb{E} _ {X' \\sim Q}[e^{-\\alpha \\ell _ \\theta(X')}].\n\\]\nThis is a measure of loss associated with the use of a parameter \\(\\theta\\) to fit new data \\(X' \\sim Q\\). We also write\n\\[\nd _ \\alpha(\\hat \\pi _ X; Q) = -\\mathbb{E} _ {\\theta \\sim \\hat \\pi _ X}\\left[ \\alpha^{-1}\\log\\mathbb{E} _ {X' \\sim Q}[e^{-\\alpha \\ell _ \\theta(X')}] \\right]\n\\]\nfor the expected R√©nyi generalization error when using the randomization scheme \\(\\theta \\sim \\hat \\pi _ X\\).\nIn order to get interesting bounds on this generalization error, we can follow the approach of Zhang (2006).\nChange of measure inequality\nWe‚Äôll need the change of measure inequality, which states that for any function \\(f\\) and distributions \\(\\pi\\), \\(\\hat \\pi\\) on \\(\\Theta,\\)\n\\[\n\\mathbb{E} _ {\\theta \\sim \\hat\\pi}[f(\\theta)] \\leq D(\\hat \\pi \\| \\pi) + \\log \\mathbb{E} _ {\\theta \\sim \\pi}\\left[e^{f(\\theta)}\\right].\n\\]\nIndeed, with some sloppyness and Jensen‚Äôs inequality we can compute\n\\[\n\\log \\int e^{f(\\theta)}\\pi(d\\theta)\\geq \\int f(\\theta)\\log(d\\pi/d\\hat\\pi(\\theta))d\\hat \\pi = \\mathbb{E} _ {\\theta \\sim \\hat \\pi}[f(\\theta)] - D(\\hat \\pi\\|\\pi).\n\\]\nGeneralization error bound\nWe can now attempt bounding \\(d _ \\alpha(\\hat \\pi _ X;Q)\\). Consider the difference \\(\\Delta _ X (\\theta) = d _ \\alpha(\\theta;Q) - \\ell _ \\theta(X)\\) between the generalization error and the empirical loss corresponding to the use of a fixed parameter \\(\\theta\\). Then by the change of measure inequality,\n\\[\n\\exp\\{\\mathbb{E} _ {\\theta \\sim \\hat \\pi _ X}[\\Delta _ X(\\theta)] - D(\\hat \\pi _ X\\|\\pi)\\} \\leq \\mathbb{E} _ {\\theta \\sim \\pi}\\left[e^{\\Delta _ X(\\theta)}\\right]\n\\]\nand hence for any \\(\\pi\\),\n\\[\n\\mathbb{E} _ {X \\sim Q}\\left[\\exp\\left\\{\\mathbb{E} _ {\\theta \\sim \\hat \\pi _ X}[\\Delta _ X(\\theta)] - D(\\hat \\pi _ X\\|\\pi)\\right\\}\\right] \\leq \\mathbb{E} _ {X \\sim Q}\\left[\\mathbb{E} _ {\\theta \\sim \\pi}\\left[e^{\\Delta _ X(\\theta)}\\right]\\right] = 1\n\\]\nBy Markov‚Äôs inequality, this implies that \\(\\forall t > 0\\),\n\\[\n\\mathbb{P}\\left(\\mathbb{E} _ {\\theta \\sim \\hat \\pi _ X}[\\Delta _ X(\\theta)] - D(\\hat \\pi _ X\\|\\pi) \\geq t\\right) \\leq e^{-t}.\n\\]\nRewriting yields\n\\[\nd _ \\alpha(\\hat \\pi _ X;Q) \\leq R _ X(\\hat \\pi _ X) + D(\\hat \\pi _ X\\|\\pi) + t\n\\]\nwith probability at least \\(1-e^{-t}\\). To recap: the term \\(d _ \\alpha(\\hat \\pi _ X;Q)\\) is understood as a generalization error, on the right hand side \\(R _ X(\\hat \\pi _ X) = \\mathbb{E} _ {\\theta \\sim \\hat \\pi _ X}[\\ell _ \\theta(X)]\\) is the empirical risk, the Kullback-Leibler divergence \\(D(\\hat \\pi _ X\\|\\pi)\\) penalizes the complexity of \\(\\hat\\pi _ X\\) seen as a divergence from a ‚Äúprior‚Äù \\(\\pi\\), and \\(t\\) is a tuning parameter.\n3. Online learning, regret and Kullback-Leibler divergence\nFollowing Barron (1998), suppose we sequentially observe data points \\(X _ 1, X _ 2, X _ 3, \\dots\\) which are say i.i.d. with common distribution \\(Q\\) with density \\(q\\). At each time step \\(n\\), the goal is to predict \\(X _ {n+1}\\) using the data \\(X^n = (X _ 1, \\dots, X _ n)\\). Our prediction is not a point estimate of \\(X _ {n+1}\\), but somewhat similarly as in the randomized estimation scenario we output a density estimate \\(\\hat p _ n = p(\\cdot \\mid X^n)\\), the goal being that \\(p(X _ {n+1}\\mid X^n)\\) be as large as possible. A bit more precisely, we individually score a density estimate \\(\\hat p _ n\\) through the risk \\(\\ell _ q(\\hat p _ n) = \\mathbb{E} _ {X _ {n+1}\\sim q}[\\log(q(X _ {n+1})/\\hat p _ n(X _ {n+1} ))] = D(q\\| \\hat p _ n)\\) which is the Kullback-Leibler divergence between \\(\\hat p _ n\\) and \\(q\\). The regret over times \\(n=1, 2,\\dots, N\\) is the sum of the risk over the whole process, i.e.\n\\[\n\\text{regret} = \\sum _ {n=1}^N D(q\\| \\hat p _ n).\n\\]\nFormally, this process is equivalent to estimating the distribution of \\(X^N\\) all at once: our density estimate \\(\\hat p^N\\) of \\(X^N\\) would simply be\n\\[\n\\hat p^N(X^N) = \\prod _ {n=1}^N \\hat p _ n(X _ n)\n\\]\nand the regret is, by the chain rule, simply \\(D(q^N \\| \\hat p^N)\\), where \\(q^N\\) is the \\(N\\)th independent product of \\(q\\).\nGiven a prior \\(\\pi\\) over a space of distributions for \\(q\\), our problem then to minimize the Bayes risk\n\\[\nB _ \\pi(\\hat p^N) = \\mathbb{E} _ {q\\sim \\pi} D(q^N\\|\\hat p^N).\n\\]\nThis is achieved by choosing \\(\\hat p^N(x) = \\hat p _ \\pi^N(x) = \\int q^N(x) \\pi(dq)\\) the prior predictive density. This is equivalent to using, at each time step \\(n\\), the poterior predictive density \\(\\hat p _ {n, \\pi}(x) = \\int q(x) \\,\\pi(dq\\mid \\{X _ i\\} _ {i=1}^n)\\).\nTo see this minimizing property of the Bayes average, it suffices to write\n\\[\nB _ \\pi(\\hat p^N) = \\mathbb{E} _ {q \\sim \\pi} \\left[D(q^N\\| \\hat p _ \\pi^N)\\right] + D(\\hat p _ \\pi^N \\| \\hat p^N).\n\\]\nNote that an consequence of this analysis is also that the posterior predictive distribution \\(\\hat p _ {n, \\pi}\\) will minimize the expected posterior risk:\n\\[\n\\hat p _ {n, \\pi} \\in \\arg\\min _ {\\hat p _ {n}} \\mathbb{E} _ {q \\sim \\pi(\\cdot\\mid X^n)}\\left[D(q\\|\\hat p _ n)\\right].\n\\]\nFollowing section 1, this furthermore means that the posterior predictive distribution minimizes the Bayes risk associated with the Kullback-Leibler loss.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-global-bounds-for-the-jensen-functional/",
    "title": "Global bounds for the Jensen functional",
    "description": "Some techniques to bound the Jensen functional.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2019-05-19",
    "categories": [],
    "contents": "\nGiven a convex function \\(\\varphi : \\mathbb{R} \\rightarrow \\mathbb{R}\\) and \\(X\\) a random variable on \\(\\mathbb{R}\\), the Jensen functional of \\(\\varphi\\) and \\(X\\) is defined as\n\\[\n\\mathcal{J}(\\varphi, X) = \\mathbb{E}[\\varphi(X)] -\\varphi(\\mathbb{E}[X]).\\tag{1}\n\\]\nThe well-known Jensen inequality states that \\(\\mathcal{J}(\\varphi, X) \\geq 0\\). For instance, if \\(\\varphi(x) = x^2\\), then \\(\\mathcal{J}(\\varphi, X) = \\text{Var}(X) \\geq 0\\). If \\(\\mu\\) and \\(\\nu\\) are two probability measures, \\(X \\sim \\nu\\) and \\(\\varphi\\) is convex with \\(\\varphi(1) = 0\\), then \\(\\mathcal{J}(\\varphi, \\tfrac{d\\mu}{d\\nu}(X)) =: D_\\varphi(\\mu, \\nu)\\) is a so-called \\(f\\)-divergence between probability measures such as the total variation distance, the Kullback-Leibler divergence, the \\(\\chi^2\\) divergence, etc.\nIf \\(X\\) is bounded, then a converse to the Jensen inequality can be easily obtained as follows: let \\(m\\) and \\(M\\) be the infimum and maximum of \\(X\\), and write \\(X = \\alpha m + (1-\\alpha)M\\) for some random variable \\(\\alpha\\) taking values in \\([0,1]\\). Then \\(\\mathbb{E}[\\alpha] = (M - \\mu)/(M-m)\\) and consequently with \\(\\mu:= \\mathbb{E}[X]\\),\n\\[\n\\mathcal{J}(\\varphi, X) \\leq \\mathbb{E}[\\alpha\\phi(m) + (1-\\alpha)\\phi(M)] - \\varphi(\\mu)\\\\\n\\qquad= \\frac{(M-\\mu)\\varphi(m) + (\\mu-m)\\varphi(M)}{M-m}- \\varphi(\\mu).\\tag{2}\n\\]\n\nWhen \\(\\mu\\) is unknown in practice, then maximizing the above over all possibilities is the bound \\[\n\\mathcal{J}(\\varphi, X) \\leq \\max_{p \\in [0,1]} \\left\\{p\\varphi(m) + (1-p)\\varphi(M) - \\varphi(pm + (1-p) M)\\right\\}\\tag{3}\n\\]\nwhich is Theorem C in Simic (2011).\nSome examples\nVariance bound. Consider for example the case where \\(\\varphi(x) = x^2\\), so that \\(\\mathcal{J}(\\varphi, X) = \\text{Var}(X)\\). Then for \\(X\\) taking values in say \\([0,1]\\), the above bounds read as\n\\[\n\\text{Var}(X) \\leq \\mu(1-\\mu) \\leq 1/4\n\\]\nwhich is a well-known elementary result.\n\\(f\\)-divergence bounds. In (Binette, 2019), I show how we can use similar ideas to get best-possible reverse Pinsker inequalities: upper bounds on \\(f\\)-divergences in terms of the total variation distance and likelihood ratio extremums. In particular, with \\(D(\\mu\\|\\nu) = \\int \\log\\left(\\frac{d\\mu}{d\\nu}\\right) d\\mu\\) the Kullback-Leibler divergence between the probability measures \\(\\mu\\) and \\(\\nu\\), we find that if \\(a = \\inf \\frac{d\\nu}{d\\mu}\\) and \\(b = \\sup \\frac{d\\nu}{d\\mu}\\), then \\[\nD(\\mu|\\nu) \\leq \\sup_A|\\mu(A) - \\nu(A)| \\left(\\frac{\\log(a)}{a-1} +\\frac{\\log(b)}{1-b}\\right).\n\\]\nApplying again the Jensen functional bound to \\(\\sup_A \\lvert \\mu(A)-\\nu(A) \\rvert = \\frac{1}{2}\\int\\left \\lvert \\frac{d\\mu}{d\\nu} - 1\\right \\rvert d\\nu\\), we obtain\n\\[\n\\sup_A|\\mu(A) - \\nu(A)| \\leq \\frac{(M-1)(1-m)}{M-m}\n\\]\nand this implies the range of values theorem\n\\[\nD(\\mu|\\nu) \\leq \\frac{(a-1)\\log(b) + (1-b)\\log(a)}{b-a}.\n\\]\nVariations\nIn cases where \\(\\mu\\) is unknown and optimizing over all possibilities is not quite feasible, we can use the following trick.\nLet \\(f(x) = x\\varphi(m) + (1-x)\\varphi(M) - \\varphi(x m +(1-x)M)\\) be the term involved in the maximization step of \\((3)\\). Then \\(f\\) is concave with \\(f(0) = f(1) = 0\\), and hence for any \\(p \\in (0,1)\\) we have that\n\\[\n\\max_{x \\in [0,1]} f(x) \\leq (\\min\\{p, 1-p\\})^{-1}f\\left(pm +(1-p)M\\right).\n\\]\nIn particular, taking \\(p = 1/ 2\\), we obtain the result of Simic (2008) stating that\n\\[\n\\mathcal{J}(\\varphi, X) \\leq \\varphi(m) + \\varphi(M) - 2\\varphi\\left(\\frac{m+M}{2}\\right).\n\\]\nWhen \\(\\varphi\\) is differentiable (this assumption is not strictly necessary but it facilitate the statements), then we can use the concavity of \\(f\\) (using the fact that \\(f(0) = f(1) = 0\\)) to very easily obtain\n\\[\n\\mathcal{J}(\\varphi, X) \\leq \\frac{f'(1)f'(0)}{f'(1)-f'(0)} \\leq \\frac{1}{4}(f'(0)-f'(1)) = \\frac{1}{4}(M-m)(\\varphi'(M) - \\varphi'(m))\n\\]\nwhich is an inequality attributed to S.S. Dragomir (1999), although I haven‚Äôt managed to find the original paper yet.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-two-sampling-algorithms-for-trigonometric-densities/",
    "title": "Two sampling algorithms for trigonometric densities",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2019-04-15",
    "categories": [],
    "contents": "\nTrigonometric densities (or non-negative trigonometric sums) are probability density functions of circular random variables (i.e.¬†\\(2\\pi\\)-periodic densities) which take the form \\[\nf(u) = a_0 + \\sum_{k=1}^n(a_k \\sin(k u) + b_k\\cos(ku)) \\tag{1}\n\\]\nfor some real coefficients \\(a_k, b_k \\in \\mathbb{R}\\) which are such that \\(f(u) \\geq 0\\) and \\(a_0 = \\frac{1}{2\\pi} \\int f(u)\\,du = (2\\pi)^{-1}\\). These provide flexible models of circular distributions. Circular density modelling comes up in studies about the mechanisms of animal orientation and also come up in bio-informatics in relationship to the protein structure prediction problem (the secondary structure of a protein - the way its backbone folds - is determined by a sequence of angles).\nHere I am discussing two simple sampling algorithms for such trigonometric densities. The first is the rejection sampling algorithm proposed in Fern√°ndez-Dur√°n et al.¬†(2014) and the second uses negative mixture sampling.\n\nParametrizing trigonometric densities\nBy F√©jer‚Äôs Theorem, the conditions on the coefficients \\(a_k\\) and \\(b_k\\) can be stated as follows: there exists a vector of complex coefficients \\(c = (c_0, c_1, \\dots, c_n)\\) with \\(\\|c\\|^2 = (2\\pi)^{-1}\\) and satisfying\n\\[\nf(u) = \\left\\| \\sum_{k=0}^n c_k e^{ik u} \\right\\|^2. \\tag{2}\n\\]\nThis provides an explicit parametrization of the space of trigonometric densities in terms of a complex hypersphere. See Fernandez-Duran (2004) for more details.\nDensity basis of the trigonometric polynomials\nIn Binette & Guillotte (2019), we studied the De la Vall√©e Poussin density basis of the trigonometric polynomials given by\n\\[\nC_{j,n}(u) = \\frac{2^n}{2\\pi {2n \\choose n}} \\left(1+\\cos\\left(u - \\tfrac{2\\pi j}{2n+1}\\right)\\right)^n,\\quad j\\in \\{0,1,\\dots, 2n\\}. \\tag{3}\n\\]\nThese can be used to express trigonometric densities as mixtures of probability density functions (instead of the functions \\(\\cos\\) and \\(\\sin\\), and the change of basis formula follows from the expression\n\\[\nC_{j,n}(u) = T_{j,n}\\,\\left[e^{-i nu}\\; \\cdots\\; e^{-i u}\\; 1\\; e^{i u}\\; \\cdots\\; e^{i nu}\\right]^{T}\n\\]\nwhere\n\\[\nT_{j,n} = \\left[\\exp\\left\\{ -i\\frac{2\\pi j p}{2n+1} u \\right\\}{2n \\choose n-p} \\Big / {2n \\choose n}\\right]_{p \\in \\{-n, \\dots, n\\}}.\n\\]\nWe‚Äôre using the complex functions \\(e^{i2\\pi k u}\\) instead of \\(\\sin\\) and \\(\\cos\\) simply because they are neater to work with; it doesn‚Äôt change much otherwise.\nWe also show in our paper that if \\(V \\sim \\text{Ber}(1 / 2)\\) and \\(W \\sim \\text{Beta}(1 / 2, 1 / 2+n)\\), then\n\\[\n(1-2V)\\arccos(1-2W) +\\tfrac{2\\pi j}{2n+1} \\sim C_{j,n}.\n\\]\nThis provide an easily formula to sample from the basis functions \\(C_{j,n}\\) and their mixtures.\nAlgorithm 1: Naive rejection sampling\nGiven an uniform upper bound \\(C\\) on the family \\(\\mathcal{V}_n\\) of trigonometric densities, we can sample from a given \\(f\\in \\mathcal{V}_n\\) using simple rejection sampling as follows:\nLet \\((x, y)\\) be uniformly distributed over \\([0, 2\\pi) \\times [0, C]\\);\nIf \\(y \\leq f(x)\\), then return \\(x\\); otherwise return to step 1.\nNow the problem is to figure out a good upper bound \\(C\\). The most basic idea is to do as in Fernandez-Duran et al.¬†(2014) and to apply the Cauchy-Schwarz inequality\n\\[\nf(u) = \\left\\| \\sum_{k=0}^n c_k e^{i k u} \\right\\|^2 \\leq \\|c\\|^2 \\sum_{k=0}^n|e^{iku}| = \\frac{n+1}{2\\pi}.\n\\]\nCan we find a better bound? I think that \\(C = \\sqrt{n}/\\pi\\) would work, but I have no clue how to prove it‚Ä¶.\nLet‚Äôs implement this in R.\nImplementation\nFirst we need a trigonometric density model.\ntrig_function <- function(c_real, complex=NULL) {\n  # Returns the trigonometric function defined as either:\n  #     f(u) = 1/(2\\pi) + \\sum_{k=1}^{n} c_real[2*k-1] \\sin(k u) + c_real[2*k] \\cos(ku),\n  # or\n  #   f(u) = \\| \\sum_{k=0}^n complex e^{i k u} \\|^2,\n  # where n is the degree of the polynomial.\n  #\n  # Args\n  #   c_real: Vector of 2*n real numbers, where n is the degree of \n  #           the trigonometric polynomial.\n  #   complex: Vector of (n+1) complex numbers.\n  \n  if (!is.null(complex)) {\n    lambd <- function(u) {\n      n = length(complex) - 1\n      k = 0:n\n      return(abs(sum(complex * exp(u * k * 1i)))**2)\n    }\n  }\n  else {\n    lambd <- function(u) {\n      n = length(c_real)/2\n      k = 1:n\n      return(1/(2*pi) + sum(c_real[2*k - 1] * cos(k*u)) + sum(c_real[2*k] * cos(k*u)))\n    }\n  }\n  return(Vectorize(lambd));\n}\nWe can also generate random trigonometric densities of a fixed degree as follows.\nrtrig <- function(n) {\n  u = rnorm(n);\n  v = rnorm(n);\n  c_comp = u + v*1i;\n  c_comp = c_comp / (sqrt(2*pi*sum(abs(c_comp)**2)));\n  return(trig_function(complex=c_comp))\n}\nUsage is like this:\nu = seq(0, 2*pi, 0.005)\nplot(u, rtrig(10)(u), type=\"l\")\n\nAnd finally we can implement the naive rejection sampling algorithm.\nnaive_rejection_sampling <- function(f, n) {\n  # Returns a random variate following the trigonometric density f of degree n.\n  drawn = FALSE\n  while(!drawn) {\n    x = runif(1)*2*pi\n    y = runif(1)*(n+1) / (2*pi)\n    if (y < f(x)) {\n      drawn = TRUE\n    }\n  }\n  return(x);\n}\nAlgorithm 2: Negative Mixture Sampling\nAnother approach to simulate from trigonometric densities relies on the De la Vall√©e Poussin mixture representation. That is, any \\(f\\in \\mathcal{V}_n\\) can be written as\n\\[\nf = \\alpha f_a - (\\alpha - 1) f_b,\\qquad f_a = \\sum_{j=0}^{2n} a_j C_{j_n}, \\quad f_b = \\sum_{j=0}^{2n} b_j C_{j,n},\n\\]\nwhere \\(\\alpha \\geq 1\\), \\(a_j, b_j \\geq 0\\) and \\(\\sum_ j a_j = \\sum_ j b_ j = 1\\). We can assume that \\(a_j b_j = 0\\) for every \\(j\\); i.e.¬†there is no redundancy in the components of \\(f_a\\) and \\(f_b\\). The density \\(f_b\\) accounts for negative weights in the mixture representation of \\(f\\) using the De la Vall√©e Poussin densities \\((3)\\).\nWe can now sample from \\(f\\) using samples from \\(f_a\\) and a simple rejection method.\nAlgorithm 2.\nLet \\(x \\sim f_a\\).\nReturn \\(x\\) with probability \\(\\frac{f(x)}{\\alpha f_a(x)}\\); otherwise return to step 1.\nImplementation\nDe la Vall√©e Poussin densities and its random variate generator.\ndvallee <- function(u, j, n) {\n  # De la Vall√©e Poussin density $C_{j,n}(u)$\n  \n  return(2^n * (1+cos(u - (2*pi*j)/(2*n+1)))^n / (2*pi*choose(2*n, n)))\n}\nrvallee <- function(j, n, m) {\n  # Returns m random variates following the De la Vall√©e Poussin density $C_{j,n}$.\n  \n  V = runif(m) > 0.5\n  W = rbeta(m, 1/2, 1/2 + n)\n  return((1-2*V)*acos(1-2*W) + (2*pi*j)/(2*n + 1))\n}\nUsage:\ns = rvallee(2, 5, 10000)\nu = seq(-pi, pi, 0.05)\nhist(s, prob=TRUE, xlim=c(-pi,pi))\nlines(u, dvallee(u, 2, 5), col=2)\n\nDe la Vall√©e Poussin mixtures.\ndValleeMixture <- function(coeffs) {\n  # De la Vall√©e Poussin mixture densities\n  \n  n = (length(coeffs) - 1)/2;\n  \n  lambd <- function(u) {\n    j = 0:(2*n)\n    return(sum(dvallee(u, j, n) * coeffs))\n  }\n  \n  return(Vectorize(lambd))\n}\nrValleeMixture <- function(coeffs) {\n  # Random sample from a De la Vall√©e Poussin mixture density. The mixture weights are allowed to take negative values.\n  \n  f = dValleeMixture(coeffs)\n  n = (length(coeffs) - 1)/2\n\n  a = coeffs * (coeffs > 0)\n  b = coeffs * (coeffs < 0)\n  \n  alpha = sum(a)\n  a = a / alpha\n  b = b / (1-alpha)\n  fa = dValleeMixture(a)\n  \n  drawn = FALSE\n  while(!drawn) {\n    # Sample from f_a\n    i = sample(0:(2*n), 1, prob = a)\n    x = rvallee(i, n, 1)\n    if ( runif(1) <  f(x)/(alpha*fa(x))) {\n      drawn = TRUE\n    }\n  }\n  \n  return(x %% (2*pi))\n}\nExample:\ncoeffs = c(0.55, -0.15, 0.55, 0, 0, 0,0.05)\nf = dValleeMixture(coeffs)\nu = seq(0, 2*pi, 0.05)\ns = replicate(50000, rValleeMixture(coeffs))\nhist(s, prob=T, ylim=c(0, 0.6))\nlines(u, f(u), col=2)\n\nOther things we could do:\nThe black box Lipschitz sampling algorithm can also be used to sample from trigonometric densities. This requires to compute good upper bounds on the Lipchitz constant on the density, which should be doable using the De la Vall√©e Poussin mixture representation.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-the-significance-of-the-adjusted-r-squared-coefficient/",
    "title": "The Significance of the adjusted R squared coefficient",
    "description": "A sound re-interpretation of the adjusted $R^2$ value for model comparison.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2019-04-10",
    "categories": [],
    "contents": "\nMy friend Anthony Coache and I have been curious about uses and misuses of the adjusted \\(R^2\\) coefficient which comes up in linear regression for model comparison and as a measure of ‚Äúgoodness of fit‚Äù. We were underwhelmed by the depth of the literature arguing for its use, and wanted to show exactly how it behaves under certain sets of assumptions. Investigating the issue brought us to re-interpret the adjusted \\(R^2\\) and to highlight a new distribution-free perspective on nested model comparison which is equivalent, under Gaussian assumptions, to Fisher‚Äôs classical \\(F\\)-test. This generalizes to nested GLMs comparison and provides exact comparison tests that are not based on asymptotic approximations. We still have many questions to answer, but here‚Äôs some of what we‚Äôve done.\n\nSo, in the context of least squares linear regression, the model for relating a vector of \\(n\\) observed responses \\(Y\\) to \\(p-1\\) independent covariates is \\(Y = X \\beta + \\varepsilon\\), where \\(X\\) is the design matrix and \\(\\varepsilon\\) is the vector of random errors. One of many summary statistics arising from data analyses based on this model is the adjusted \\(R^2\\) coefficient, defined as\n\\[R^2_a(Y, X) = 1 - \\frac{\\|\\hat \\varepsilon\\|^2}{\\left\\|Y - \\bar Y \\right\\|^2}\\frac{n-1}{n-p},\\]\nwhere \\(\\hat \\varepsilon\\) is the vector of residual errors and \\(\\bar Y\\) is the mean of \\(Y\\) (Cramer, 1987; Ohtani, 2004). The \\(R^2\\) coefficient and its adjusted counterpart are widely used as measures of goodness of fit, as model selection criteria and as estimators of the squared multiple correlation coefficient \\(\\rho^2\\) of the parent population. While their properties have been thoroughly studied in these contexts (Olkin, 1958; Helland, 1987; Cramer, 1987; Meepagala, 1992; Ohtani, 2004), the literature is scarce in explanations as to what, exactly, \\(R^2_a\\) adjusts for in non-trivial cases. It is not an unbiased estimator of \\(\\rho^2\\) and the degrees of freedom adjustment heuristic (Theil, 1971) is of limited depth.\nHere we show in what sense the adjusted \\(R^2\\) coefficient may be considered ‚Äúunbiased‚Äù. For nested models comparison, we also suggest how to test the significance of a \\(R^2_a\\) difference between two nested models which is equivalent to Fisher‚Äôs \\(F\\)-test under Gaussian assymptions. The \\(R^2_a\\) test is however done from a largely distribution-free perspective which is conditional on the observation of \\(Y\\). The results are then reinterpreted under classical Gaussian assumptions, which emphasize the dual perspectives between those two tests.\nModel and notations\nGiven a matrix \\(A\\), let \\(\\text{Span}(A)\\) denote the subspace spanned by its columns and \\(P_A\\) be the (orthogonal) projection on \\(\\text{Span}(A)\\).\nThe commonly used linear regression model is \\[Y = X \\beta + \\varepsilon,\\] where \\(Y\\) is a \\(n \\times 1\\) vector of observed responses, the design matrix \\(X\\) consists of a constant column vector followed by \\(p-1\\) column vectors of covariates, \\(\\beta\\) is the vector of parameters to be estimated and \\(\\varepsilon\\) is the vector of random errors. The fixed design matrix is supposed to be non-random and of full rank \\(p\\). Let also \\(\\hat \\varepsilon = Y - P_X Y\\) denote the residuals errors obtained by linear least squares fitting.\nTesting for an increase of \\(R^2_a\\)\nSuppose we have two design matrices \\(X\\) and \\(\\tilde X\\), where \\(\\text{Span}(X) \\subset \\text{Span}(\\tilde X)\\). Let \\(p=\\text{rank}(X)\\) and \\(\\tilde p = \\text{rank}(\\tilde X) = p+k\\). Given the vector of observations \\(Y\\), we observe two values \\(R^2 _ a (Y, X)\\) and \\(R^2_ a (Y, \\tilde X)\\) associated to the nested models. The classical way to test for a significant increase of \\(R^2 _ a\\) is to carry out Fisher‚Äôs \\(F\\)-test based on the statistics\n\\[\nF = \\frac{\\| \\hat Y_0 - \\hat Y \\|^2}{\\| Y - \\hat Y \\|^2} \\frac{n - \\tilde p }{k},\n\\]\nwhere \\(\\hat Y_0 = P_X Y\\) and \\(\\hat Y = P_ {\\tilde X}Y\\). This is a function of both \\(R^2_a(Y, X)\\) and \\(R^2_a(Y, \\tilde X)\\), which, under the assumption\n\\[\nH_0: \\quad Y = X \\beta + \\varepsilon\n\\]\nfor \\(\\varepsilon \\sim N(0, \\sigma^2 I_n)\\), has an \\(F\\)-distribution.\nThis is, however, a rather convoluted way of going about comparing the two numbers \\(R^2_a(Y, X)\\) and \\(R^2_a(Y, \\tilde X)\\). Can we do simpler, and can we drop the Gaussian assumption? The answer is yes, although we‚Äôll have to change a bit our point of view on the problem.\nA Dual perspective on nested model comparison\nThe whole point of nested model comparison is to see if the new covariates in \\(\\tilde X\\), i.e.¬†those that are not part of \\(\\text{Span}(X)\\), bring new information about \\(Y\\). In the context of an exploratory analysis where the observations and predictors are all observed, we propose to change our perspective to the following testing procedure:\ncondition on the observation of \\(Y\\) and \\(X\\) (consider them fixed, observed values);\ntests if the new covariates in \\(\\tilde X\\) are random noise.\nHence, rather than testing the model \\(Y = X\\beta + \\varepsilon\\) under a Gaussian noise assumption, we test for covariate randomness, our null hypothesis becomes\n\\[\nH_0':\\quad \\text{the complement of $\\text{Span}(X)$ in $\\text{Span}(\\tilde X)$ is a random subspace.}\n\\]\nThis test can be carried out using any test statistic \\(T\\), and obviously the distribution of \\(T\\) under \\(H_0'\\) (and conditionally on \\(Y\\)), will not depend on the unknown parameter \\(\\beta\\) nor on the noise structure \\(\\varepsilon\\) (which has been conditionned out of randomness). In particular, we can take \\(T = R^2_a(Y, \\tilde X)\\).\nDoes it make any sense? Well it does not change anything! The test obtained in this framework is entirely equivalent to Fisher‚Äôs \\(F\\)-test we reviewed before: for any given observation of \\(Y\\), \\(X\\) and \\(\\tilde X\\), the two tests will give the same results.\nLet me make all of this more precise.\nSome precisions\nLet \\(\\tilde X = [X \\; W] \\in \\mathbb{R}^{n \\times \\tilde p}\\) be the concatenation of \\(X\\) with a matrix \\(W = [W_1 \\, \\cdots \\, W_k]\\) of \\(k\\) new covariates. The goal is to test whether or not \\(R^2_a(Y, \\tilde X)\\) has significantly increased from \\(R^2_a(Y, X)\\). Henceforth, we shall assume that both \\(Y\\) and \\(X\\) are fixed and the null hypothesis is\n\\[\nH_0':\\; \\text{ the } W_i \\text{ are independent and of uniformly distributed directions.}\n\\]\nBy saying that \\(W_i\\) has a uniformly distributed direction, we mean that \\(W_i/\\|W_i\\|\\) is uniformly distributed on the \\(n\\)-sphere. This is satisfied, for instance, if \\(W_i \\sim N(0, \\sigma_i^2 I_n)\\) and this represents the augmentation of the covariate space through random directions. It is equivalent to saying that the complement of \\(\\text{Span}(X)\\) in \\(\\text{Span}(\\tilde X)\\) is a random subspace. The following proposition shows that the expected value of \\(R^2_a(Y, \\tilde X)\\) is invariant under the addition of such covariates and provides the distribution of \\(R^2_a(Y, \\tilde X)\\) under \\(H_0'\\).\nProposition 1. Let \\(Y \\in \\mathbb{R}^n\\) and \\(X \\in \\mathbb{R}^{n \\times p}\\) be fixed and let \\(\\tilde X = [X \\; W_1 \\, \\cdots \\, W_k]\\) be the concatenation of \\(X\\) with \\(k \\leq n- p\\) independent random vectors \\(W_1, \\ldots, W_k\\) of uniformly distributed directions. Then\n\\[\n\\mathbb{E}\\left[ R^2_a(Y, \\tilde X) \\right] = R^2_a(Y, X).\n\\]\nand, more precisely, under \\(H_0\\) we have that \\(R^2_a(Y, \\tilde X)\\) is distributed as\n\\[\n1-  \\frac{(n-1)\\| \\hat \\varepsilon \\|^2}{(n-\\tilde p) \\| Y - \\bar Y \\|^2}\\text{Beta}\\left(\\tfrac{n-\\tilde p}{2}, \\tfrac{k}{2} \\right)\n\\]\nwhere \\(\\text{Beta}\\left(\\tfrac{(n-\\tilde p)}{2}, \\tfrac{k}{2} \\right)\\) is a Beta random variable of parameters \\((n-\\tilde p)/2\\) and \\(k/2\\).\nProof. Let \\(\\omega\\) be the projection of \\([W_1 \\, \\cdots \\, W_k]\\) on the orthogonal \\(V\\) of \\(\\text{Span}(X)\\) and denote by \\(P_\\omega\\) the orthogonal projection onto \\(V_\\omega = \\text{Span}(\\omega)\\). By the Pythagorean theorem we have \\(\\|Y - P_ {\\tilde X} Y \\|^2 + \\|P_\\omega \\hat \\varepsilon\\|^2 = \\|\\hat \\varepsilon\\|^2\\) and hence we may write\n\\[\n    R^2_a(Y, \\tilde X) = 1- \\frac{(n-1)\\|\\hat \\varepsilon\\|^2}{(n-\\tilde p) \\left\\| Y - \\bar Y\\right\\|^2} \\left(1 - \\frac{\\|P_\\omega \\hat \\varepsilon\\|^2}{\\|\\hat \\varepsilon\\|^2} \\right).\n\\]\nWe now derive the distribution of \\(\\|P_\\omega \\hat \\varepsilon\\|^2/\\|\\hat \\varepsilon\\|^2\\). This term is the squared norm of projection of the unit vector \\(\\hat \\varepsilon / \\|\\hat \\varepsilon\\| \\in V\\) on the random subspace \\(V_\\omega \\subset V\\). Let us now introduce a random unitary matrix \\(U\\) obtained by orthonormalizing \\(\\dim(V) = n - p\\) random vectors of uniformly distributed directions, so that \\(P_\\omega \\hat \\varepsilon\\) is distributed as the first \\(k\\) components of the vector \\(U \\hat \\varepsilon\\). Since \\(U\\hat \\varepsilon / \\|\\hat \\varepsilon\\|\\) is uniformly distributed on the unit sphere of \\(V\\), it follows that the squared norm of its first \\(k\\) components has a \\(\\text{Beta}(k/2, (n-\\tilde p)/2)\\) distribution. In other words, we have shown that \\(\\|P_\\omega \\hat \\varepsilon\\|^2/\\|\\hat \\varepsilon\\|^2 \\sim \\text{Beta}\\left(\\tfrac{k}{2}, \\tfrac{n-\\tilde p}{2} \\right)\\).\nThe expectation of \\(R^2_a(Y, \\tilde X)\\) is obtained from this distributional expression. \\(\\Box\\)\nReinterpretation under Gaussian hypotheses\nWhile the preceding analysis was conditional on the observation of \\(Y\\), suppose now that \\(Y = X \\beta + \\varepsilon\\), where \\(\\varepsilon \\sim N(0, \\sigma^2)\\) for some \\(\\sigma^2 > 0\\). The distribution of \\(R^2_a(Y, X)\\) is then intricately related to the unknown parameter \\(\\beta\\), preventing a direct analysis.\nHowever, as shown in Cramer (1987), the adjusted \\(R^2\\) coefficient can still be understood as compensating for irrelevant covariates: in a correctly specified model, its expected value is invariant under the addition of covariates. This is formalized in Proposition 2 below. We preferred a more elementary proof than found therein, avoiding the rather involved explicit expression of the expected value that depends on the unknown parameter \\(\\beta\\).\nProposition 2. Suppose \\(Y = X \\beta + \\varepsilon\\), where \\(\\beta \\in \\mathbb{R}^{p}\\) and \\(\\varepsilon \\sim N(0, \\sigma^2 I_n)\\) is Gaussian noise. If \\(\\tilde X\\) is another design matrix of rank \\(\\tilde p\\) such that \\(\\text{Span}(X) \\subset \\text{Span}(\\tilde X)\\), then\n\\[\n\\mathbb{E}\\left[ R^2_a(Y, \\tilde X) \\right] = \\mathbb{E}\\left[R^2_a(Y, X)\\right].\n\\]\nRemark. More precisely, we know the conditional distribution of \\(R^2_a(Y, \\tilde X)\\) given \\(R^2_a(Y, X)\\): it is the same as the distribution which appears in the context of Proposition 1. The above results then follows from a simple computation.\nProof. Let \\(\\hat \\varepsilon^{*} = Y - P_ {\\tilde X} Y\\) and write \\(\\lambda = \\left\\|\\mathbb{E}\\left[Y - \\bar Y\\right]\\right\\|^2/\\sigma^2\\). Then \\(\\frac{\\|\\hat \\varepsilon^{*}\\|^2}{\\left\\|Y - \\bar Y\\right\\|^2}\\) is distributed as \\[\n    \\frac{\\sum_ {i=1}^{n - \\tilde p} Z_i^2}{\\sum_ {i=1}^{n - \\tilde p} Z_i^2 + \\chi^2_ {\\tilde p -1} (\\lambda)}\n\\]\nfor independent \\(Z_i \\sim N(0,1)\\) and \\(\\chi^2_ {\\tilde p - 1} (\\lambda)\\) a noncentral \\(\\chi^2\\) random variable of parameter \\(\\lambda\\). Hence\n\\[\n\\mathbb{E}\\left[ \\frac{\\|\\hat \\varepsilon^{}\\|^2}{\\left\\|Y - \\bar Y\\right\\|^2} \\right] = (n-\\tilde p) \\mathbb{E}\\left[\\frac{Z_1^2}{\\sum{i=1}^{n - \\tilde p} Z_i^2 + \\chi^2{\\tilde p -1} (\\lambda)}\\right]\n    = (n-\\tilde p)K,\n\\]\nwhere \\(K = \\mathbb{E}\\left[\\frac{Z_1^2}{Z_1^2 + \\chi^2_ {n - 2} (\\lambda)}\\right]\\) and \\(\\chi^2_ {n-2}(\\lambda)\\) is a new and independent noncentral \\(\\chi^2\\) random variable. It follows that\n\\[\n    \\mathbb{E} \\left[R^2_a(Y, \\tilde X) \\right] = 1 - (n-1)K\n\\]\ndepends on \\(\\tilde X\\) only through \\(X\\) and must equal \\(\\mathbb{E} \\left[R^2_a(Y, X) \\right]\\). \\(\\Box\\)\nRelationship with Fisher‚Äôs \\(F\\)-test\nIn the context of Proposition 2, suppose in particular that \\(\\tilde X = [X \\; W]\\), where \\(W = [W_1\\, \\cdots \\, W_k]\\) is a matrix of additional fixed regressors. Recall that the \\(F\\)-statistic for Fisher‚Äôs test with nested models of \\(p\\) and \\(\\tilde p = p + k\\) parameters respectively is given by\n\\[\nF = \\frac{\\| \\hat Y_0 - \\hat Y \\|^2}{\\| Y - \\hat Y \\|^2} \\frac{n - \\tilde p }{k},\n\\]\nwhere \\(\\hat Y_0 = P_X Y\\) and \\(\\hat Y = P_{\\tilde X} Y\\) are the vector of predicted values for the models corresponding to \\(X\\) and \\(\\tilde X\\). The test of significance devised in Section 2, based on \\(R^2_a(Y, \\tilde X)\\), is then equivalent to Fisher‚Äôs \\(F\\)-test of the hypothesis\n\\[\nH_0^{\\text{Gauss}}:\\; Y = X\\beta + \\varepsilon\\, \\text{ where }\\,\\varepsilon \\sim N(0, \\sigma^2 I_n).\n\\]\nTo see this, let \\(\\omega\\) be, as in the proof of Proposition 1, the projection of \\([W_1\\,\\cdots\\,W_k]\\) on the orthogonal of \\(\\text{Span}(X)\\) and denote by \\(P_\\omega\\) the projection on \\(\\text{Span}(\\omega)\\). Then the \\(F\\)-statistic can be written as\n\\[\n    F = \\frac{\\|P_\\omega \\hat \\varepsilon\\|^2}{\\|\\hat \\varepsilon - P_\\omega \\hat \\varepsilon \\|^2} \\frac{n-\\tilde p}{k} = \\frac{\\|P_\\omega \\hat \\varepsilon\\|^2/\\|\\hat \\varepsilon\\|^2}{1 - \\|P_\\omega \\hat \\varepsilon \\|^2/\\|\\hat \\varepsilon\\|^2} \\frac{n-\\tilde p}{k}.\n\\]\nThis is a monotonous invertible transform of \\(\\|P_\\omega \\hat \\varepsilon\\|^2/\\|\\hat \\varepsilon\\|^2\\) which, under \\(H_0^{\\text{Gauss}}\\), follows a Beta distribution of parameters \\(k/2\\) and \\((n-\\tilde p)/2\\). Yet in the framework of Section 2 and under \\(H_0\\), where now \\(\\omega\\) is random and \\(\\hat \\varepsilon\\) fixed, the test statistic \\(R^2_ a(Y, \\tilde X)\\) is also a monotonous invertible function of \\(\\|P_ \\omega \\hat \\varepsilon\\|^2/\\|\\hat \\varepsilon\\|^2 \\sim \\text{Beta}(k/2, (n-\\tilde p)/2)\\). This shows that the two unilateral tests are equivalent: the same observations yield the same \\(p\\)-values.\nDiscussion\nWe have highlighted dual perspectives on nested models comparison. An increase of \\(R^2\\) may be due to random noise that correlates with fixed regressors, or to random regressors that correlate with fixed observations. Fisher‚Äôs test of the first hypothesis is equivalent to the \\(R^2_a\\) test of the second. Furthermore, we showed that \\(R^2_a\\) compensates properly, on the average, for both types of inflation of \\(R^2\\). We suggest this provides a clear explanation of what \\(R^2_a\\) exactly adjusts for and how it can properly be used for models comparison.\nFurthermore, the fact that random covariate tests, conditional on the observations, can be carried out exactly using any measure of goodness of fit (e.g.¬†the likelihood or the AIC) suggests that our approach may be helpful in devising nested model comparison tests for GLMs. Testing at a chosen confidence level also provides more flexibility than using a rule-based procedure such as the AIC.\nReferences\nCramer, J. S. (1987). Mean and variance of r2 in small and moderate samples. Journal of Econometrics 35(2), 253 ‚Äì 266.\nHelland, I. S. (1987). On the interpretation and use of r2 in regression analysis. Biometrics 43(1), 61‚Äì69.\nMeepagala, G. (1992). The small sample properties of r2 in a misspecified regression model with stochastic regressors. Economics Letters 40(1), 1 ‚Äì 6.\nOhtani, K. and H. Tanizaki (2004). Exact distributions of r2 and adjusted r2 ina linear regression model with multivariate t error terms. Journal of the Japan Statistical Society 34(1), 101‚Äì109.\nOlkin, I. and J. W. Pratt (1958). Unbiased estimation of certain correlation coefficients. The Annals of Mathematical Statistics 29(1), 201‚Äì211.\nTheil, H. (1971). Principles of econometrics (1 ed.). New York: J. Wiley.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-3d-data-visualization-with-webglthreejs/",
    "title": "3D data visualization with WebGL/Three.js",
    "description": {},
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2019-01-06",
    "categories": [],
    "contents": "\n\n\nApplet to visualize the positions and depths of earthquakes of magnitude greater than 6 from January 1st 2014 up to January 1st 2019. Data is from the US Geological Survey (usgs.gov). Code is on GitHub.\n\n\n\n\n\nThe original motivation was to make a web tool for high-dimensional data exploration through spherical multidimensional scaling (S-MDS). The basic idea of S-MDS is to map a possibly high-dimensional dataset on the sphere while approximately preserving a matrix of pairwise distances (or divergences). An interactive visualization tool could help explore the mapped dataset and translate observations back to the original data domain. To be continued‚Ä¶\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-ism-at-the-eureka-science-festival/",
    "title": "ISM at the Eureka! Science Festival!",
    "description": {},
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2018-06-07",
    "categories": [],
    "contents": "\nWe‚Äôve been hard at work getting ready for the Eureka! science festival held this weekend at the Montreal Science Centre. Come check it out!\n\nAt the festival:\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-short-proof-critical-points-in-invariant-domains/",
    "title": "Short proof: critical points in invariant domains",
    "description": {},
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2017-04-29",
    "categories": [],
    "contents": "\nLet \\(f : \\mathbb{R}^k \\rightarrow \\mathbb{R}^k\\) be a \\({}\\mathcal{C}^1\\) vector field and denote by \\(\\phi(x): t \\mapsto \\phi_t(x)\\) its stream. That is, \\(\\phi_0(x) = x\\) and \\(\\frac{d}{dt}\\phi_t(x) = f(\\phi_t(x))\\). A domain \\(D \\subset \\mathbb{R}^k\\) is said to be invariant (under the stream of \\(f\\)) if \\(\\phi_t(x) \\in D\\) for all \\(x \\in D\\) and \\(t \\geq 0\\). The curve \\(\\{¬† \\phi_t(x) \\,|\\, t \\in \\mathbb{R} \\}\\) is said to be a closed orbit of \\(f\\) if there exists \\(T \\gt; 0\\) such that \\(\\phi_0(x) = \\phi_T(x)\\).\nTheorem. If \\(D \\subset \\mathbb{R}^k\\) is invariant and diffeomorphic to a closed ball of \\(\\mathbb{R}^k\\), then \\(f\\) has a zero in \\(D\\).\nCorollary. If \\(k=2\\), then any closed orbit of \\(f\\) encloses a zero of \\(f\\).\nProof of the theorem. Suppose that \\(\\|f(x)\\| \\gt; \\alpha \\gt; 0\\) for all \\(x \\in D\\) and let \\(M = \\sup_{x \\in D} \\|f(x)\\|\\). Since \\(f\\) is uniformly continuous on \\(D\\), there exists \\(\\delta \\gt; 0\\) such that \\(\\|x-y\\| \\lt; \\delta\\) implies \\(\\|f(x) - f(y)\\| \\lt; \\alpha\\). Also, by Brouwer‚Äôs fixed point theorem, there exists \\(x_0 \\in D\\) such that \\(\\phi_{\\delta / M}(x_0) = x_0\\). This yields a closed orbit \\(\\Gamma = \\{\\phi_t(x_0) \\,|\\, t \\geq 0\\}\\) such that any two points on \\(\\Gamma\\) are at distance at most \\(\\delta\\) from each other. Since \\(\\Gamma\\) is closed, there must exist \\(a,b \\in \\Gamma\\) such that \\(\\langle f(a), f(b) \\rangle \\leq 0\\). Hence we find that \\(\\|f(a) - f(b)\\| \\gt; \\|f(a)\\| \\gt; \\alpha\\), even though \\(\\|a-b\\| \\lt; \\delta\\). This is impossible. Thus \\(\\|f\\|\\) is not bounded away from zero and \\(f\\) must have a zero in the compact \\(D\\). \\(\\Box\\)\nProof of the corollary. When \\(k=2\\), the Jordan-Brouwer theorem implies that closed orbits separate the plane in two connected components, one of which is bounded. Schoenflies‚Äô theorem, strengthening the above, ensures that the union of bounded component with the closed orbit is diffeomorphic to the closed disk. Invariance follows from the unicity of the solution to initial value problems when \\(f\\) is \\(\\mathcal{C}^1\\). \\(\\Box\\)\nThis can be generalized as follows. For the sake of mixing things up, we state the result in topological terms.\nTheorem (Particular case of the Poincar√©-Hopf theorem.)\nLet \\(M\\) be a compact submanifold of \\(\\mathbb{R}^k\\) with non-zero Euler characteristic \\(\\chi(M)\\), and let \\(\\phi : [0,1] \\times M \\rightarrow M : (t,x) \\mapsto \\phi_t(x)\\) be a smooth isotopy. Then for all \\(t \\in [0,1]\\), there exists distinct points \\(x_1, x_2, \\dots x_{|\\chi(M)|}\\) such that\n\n\\(\\frac{d}{dt}\\phi_t(x_i) = 0.\\)\n\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  },
  {
    "path": "posts/2020-11-15-tubular-neighborhoods/",
    "title": "Tubular neighborhoods",
    "description": "Complete proof of the tubular neighborhood theorem for submanifolds of euclidean space. I was unable to find an elementary version in the litterature.",
    "author": [
      {
        "name": "Olivier Binette",
        "url": {}
      }
    ],
    "date": "2016-12-02",
    "categories": [],
    "contents": "\nLet me introduce some notations. A \\(\\mathcal{C}^l\\) submanifold of dimension \\(m\\) of \\(\\mathbb{R}^k\\) is a subset \\(M\\) that is locally \\(\\mathcal{C}^l\\)-diffeomorphic to open balls of \\(\\mathbb{R}^m\\). Similarily, a \\(\\mathcal{C}^l\\) manifold with boundary is locally diffeomorphic to open balls of the half space \\(\\mathbb{H}^k = \\{(x_1, \\dots, x_m)\\in \\mathbb{R}^m | x_m \\geq 0\\}\\). If \\(f : M \\rightarrow N\\) is a differentiable map between manifolds, we denote by \\(df_x: T_x M \\rightarrow T_{f(x)} N\\) the differential of \\(f\\) at \\(x\\). Each tangent space \\(T_x M\\) has an orthogonal complement \\(N_x M\\) in \\(\\mathbb{R}^k\\); the normal bundle of \\(M\\) is \\(N(M) = \\{(x, v) \\in \\mathbb{R}^{2k} | x \\in M,\\, v \\in N_x M\\}\\). In the following, we assume \\(M\\) is compact.\nGiven \\(\\varepsilon \\gt; 0\\), we let \\(V_\\varepsilon = \\{(x, v) \\in N(M) \\,|\\, |v| \\le \\varepsilon\\}\\) and \\(P_\\varepsilon = \\{y \\in \\mathbb{R}^k | d(y, M) \\le \\varepsilon \\}\\), where \\(d\\) is the euclidean distance. The set \\(V_\\varepsilon\\) is an \\(\\varepsilon\\)-neighborhood of the cross-section \\(M \\times \\{0\\}\\) in \\(N(M)\\), and \\(P_\\varepsilon\\) is a tubular neighborhood of \\(M\\) in \\(\\mathbb{R}^k\\). We will prove the following theorem.\nTubular neighborhood theorem. Let \\(M\\) be a compact submanifold of \\(\\mathbb{R}^k\\), without boundary. For \\(\\varepsilon \\gt; 0\\) sufficiently small, \\(V_\\varepsilon\\) and \\(P_\\varepsilon\\) are manifolds, diffeomorphic under the map \\(F : V_\\varepsilon \\rightarrow P_\\varepsilon : (x, v) \\mapsto x+v\\).\nCorollary 1. If \\(\\varepsilon \\gt; 0\\) is sufficiently small, then for each \\(w \\in P_\\varepsilon\\) there exists an unique closest point to \\(w\\) on \\(M\\).\nNote, however, that this corollary may not hold when \\(M\\) is only a \\(\\mathcal{C}^1\\) manifold. We will require \\(M\\) to be at least \\(\\mathcal{C}^2\\). The proof will make clear why this is necessary, but I also present a counter-example.\nCounterexample (\\(\\mathcal{C}^1\\) manifolds). Let \\(M\\) be the graph of \\(f: [-1,1] \\rightarrow \\mathbb{R} : t \\mapsto t^{4/3}\\) in \\(\\mathbb{R}^2\\). It is indeed a compact \\(\\mathcal{C}^1\\) manifold since \\(f\\) is \\(\\mathcal{C}^1\\). However, the points \\(w_\\varepsilon = (0, \\varepsilon)\\) have, for all \\(\\varepsilon \\gt; 0\\), two closest points on \\(M\\). To see this, first note that if \\(M\\) had an unique closest point to \\(w_\\varepsilon\\), then that point would be \\((0,0)\\), by the parity of \\(f\\). Now, consider the function \\(g_\\varepsilon :[-\\varepsilon, \\varepsilon] \\rightarrow \\mathbb{R}: t \\mapsto \\varepsilon - \\sqrt{\\varepsilon^2 - t^2 }\\), its graph being the lower half of a circle centered at \\(w_\\varepsilon\\) and crossing \\((0,0)\\). We find \\[\\lim_{t \\rightarrow 0} g_\\varepsilon'(t)/f'(t) = \\lim_{t \\rightarrow 0} \\frac{3}{4}\\frac{t^{2/3}}{\\sqrt{\\varepsilon^2 - t^2}} = 0,\\] meaning that the graph of \\(g_\\varepsilon\\) is under \\(M\\) near \\((0,0)\\). This is a contradiction, as me may thus shrink the circle to find two intersection points on \\(M\\) closer to \\(w_\\varepsilon\\) than \\((0,0)\\).\nProof of the theorem.\nIn the following, \\(M\\) is a compact \\(\\mathcal{C}^2\\) submanifold of \\(\\mathbb{R}^k\\) of dimension \\(m\\).\nLemma 1. The normal bundle \\(N(M)\\) is a \\(\\mathcal{C}^1\\) submanifold of \\(\\mathbb{R}^{2k}\\) and \\(T_{(x,v)} N(M) = T_xM \\times N_x M\\).\nProof. Let \\((x_0, 0) \\in N(M)\\) and consider a neighborhood \\(\\mathcal{U}\\) of \\(x_0\\) in \\(\\mathbb{R}^k\\). It may be chosen so that \\(M\\cap \\mathcal{U} = \\phi^{-1}(0)\\), for some \\(\\phi : \\mathcal{U} \\rightarrow \\mathbb{R}^{k-m}\\) with \\(d\\phi_x\\) surjective. Restricting \\(\\mathcal{U}\\) some more, we can find a \\(\\mathcal{C}^2\\) diffeomorphism \\(\\psi : \\mathbb{R}^m \\rightarrow M\\cap \\mathcal{U}\\). Using \\(\\phi\\) and and \\(\\psi\\), we construct a \\(\\mathcal{C}^1\\) map \\(f : \\mathbb{R}^k \\times \\mathbb{R}^k \\rightarrow \\mathbb{R}^k\\) having \\(0\\) as a regular value and such that \\(N(M\\cap \\mathcal{U}) = f^{-1}(0)\\). It will follow from the preimage theorem that \\(N(M \\cap \\mathcal{U})\\) is a \\(\\mathcal{C}^1\\) submanifold of dimension \\(k\\). Furthermore, \\(N(M \\cap \\mathcal{U})\\) is an open neighborhood of \\((x_0, v)\\) for all \\(v \\in T_{x_0}M\\) and we will have found that \\(N(M)\\) is a \\(\\mathcal{C}^1\\) manifold.\nThe map \\(f\\) is defined as \\(f: \\mathbb{R}^k \\times \\mathbb{R}^k \\rightarrow \\mathbb{R}^k\\), \\(f(x, v) = \\left(\\phi(x), u(x, v)\\right)\\), where \\(u : \\mathbb{R}^{2k} \\rightarrow \\mathbb{R}^m : (x,v) \\mapsto (\\langle v, d\\psi_{\\psi^{-1}(x)}(e_1) \\rangle, \\dots, \\langle v, d\\psi_{\\psi^{-1}(x)}(e_m) \\rangle)\\) and \\((e_i)\\) is a basis of \\(\\mathbb{R}^m\\). Because the vectors \\(d\\psi_{\\psi^{-1}(x)}(e_i)\\) form a basis of \\(T_x M\\), the zero set \\(u^{-1}(0)\\) is precisely \\(N_x M\\) and we find that \\(f^{-1}(0) = M \\cap \\mathcal{U}\\). To differentiate \\(f\\), we use the fact that \\(\\psi\\) is \\(\\mathcal{C}^2\\). In its matrix form,\n\\[\n  df_{(x,v)} = \\left[\\begin{array}{cc}d\\phi_x& 0\\\\ *& \\partial_2 u_{(x,v)}\\end{array}\\right]\n\\]\nwhere both \\(d\\phi_x\\) and \\(\\partial_2 u_(x,v) = u(x, \\cdot)\\) are surjective whenever \\(x \\in M\\). Thus \\(df_{(x,v)}\\) is indeed surjective for all \\((x,v) \\in f^{-1}(0)\\). The assertion \\(T_{(x,v)} N(M) = T_xM \\times N_x M\\) follows from \\(T_{(x,v)} N(M) = ker(df_{(x,v)}\\).¬† QED.\nLemma 2. For all \\(\\varepsilon \\gt; 0\\), \\(V_\\varepsilon \\subset N(M)\\) is a submanifold with boundary.\nProof. Let \\(f : N(M) \\rightarrow \\mathbb{R} : (x,v) \\mapsto ||v||^2\\). For any \\((x, v) \\in f^{-1}(\\varepsilon^2)\\), we have \\(df_{(x,v)}: T_x M \\times N_x M \\rightarrow \\mathbb{R} : (y, u) \\mapsto 2\\langle u, v \\rangle\\) is surjective. By the preimage theorem, we find that \\(f^{-1}((-\\infty, \\varepsilon^2])\\) is a submanifold of \\(N(M)\\) with boundary \\(f^{-1}(\\varepsilon^2)\\). QED.\nLemma 3. The map \\(F: V_\\varepsilon \\rightarrow \\mathbb{R}^k\\) is a local diffeomorphism onto its image \\(N_\\varepsilon\\).\nProof. The differential of \\(F\\) is simply \\(dF_{(x,v)} : T_xM \\times N_xM \\rightarrow \\mathbb{R}^k : (a, b) \\mapsto a+b\\), an isomorphism since \\(\\mathbb{R}^k\\) is the direct sum of \\(T_xM\\) and \\(N_xM\\). By the inverse function theorem, it follows that \\(F\\) is a local diffeomorphism onto its image. Now, it is clear that \\(F(V_\\varepsilon) \\subset N_\\varepsilon\\). If \\(w \\in N_\\varepsilon\\), then by compacity of \\(M\\) we can find a closest point \\(x \\in M\\). It is straightforward to verify that \\(w-x \\in N_xM\\), and thus \\((x, w-x)\\in V_\\varepsilon\\), \\(F(x, w-x) = w\\). QED.\nLemma 4 (See Spivak, 1970). If \\(\\varepsilon \\gt; 0\\) is taken sufficiently small, then \\(F : V_\\varepsilon \\rightarrow N_\\varepsilon : (x, v) \\mapsto x+v\\) is a diffeomorphism.\nProof. It suffices to show that \\(F\\) is bijective, whenever \\(\\varepsilon \\gt; 0\\) is sufficiently small. The local diffeomorphism will then be a global diffeomorphism. Note that \\(F\\) is injective on \\(M\\times \\{0\\}\\). Let \\(A = \\{(a, b) \\in N(M)^2 | a \\not = b,\\, F(a) = F(b)\\}\\) be the set of points showcasing the non-injectivity of \\(F\\). This set is disjoint from the compact set \\((M \\times \\{0\\})^2\\). Therefore, if we can show that \\(A\\) is closed, we will find \\(d(A, (M \\times \\{0\\})^2) \\gt; 0\\) and taking \\(\\varepsilon \\lt; d(A, (M \\times \\{0\\})^2)\\) will suffice. Let \\(\\{(a_n, b_n)\\}\\) be a sequence of points in \\(A\\) converging to some \\((a,b)\\). By continuity of \\(F\\), we must have \\(F(a) = F(b)\\). We cannot have \\(a = b\\), as this would contradict the fact that \\(F\\) is a local diffeomorphism. Therefore \\(a \\not = b\\) and \\((a,b) \\in A\\). QED.\nReferences:\nMilnor, J.W. (1965) Topology from a differentiable point of view. Spivak, M. (1970) A comprehensive introduction to differential geometry.\n\n\n\n",
    "preview": {},
    "last_modified": "2022-03-27T12:26:07-04:00",
    "input_file": {}
  }
]
